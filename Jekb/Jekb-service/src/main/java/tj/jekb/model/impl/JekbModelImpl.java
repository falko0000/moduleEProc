/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package tj.jekb.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import tj.jekb.model.Jekb;
import tj.jekb.model.JekbModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Jekb service. Represents a row in the &quot;klassifikatory.jekb&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link JekbModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link JekbImpl}.
 * </p>
 *
 * @author falko
 * @see JekbImpl
 * @see Jekb
 * @see JekbModel
 * @generated
 */
@ProviderType
public class JekbModelImpl extends BaseModelImpl<Jekb> implements JekbModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a jekb model instance should use the {@link Jekb} interface instead.
	 */
	public static final String TABLE_NAME = "klassifikatory.jekb";
	public static final Object[][] TABLE_COLUMNS = {
			{ "jekb_id", Types.BIGINT },
			{ "kod", Types.VARCHAR },
			{ "nazvanie_ru", Types.VARCHAR },
			{ "nazvanie_tj", Types.VARCHAR },
			{ "nazvanie_en", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("jekb_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("kod", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nazvanie_ru", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nazvanie_tj", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nazvanie_en", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table klassifikatory.jekb (jekb_id LONG not null primary key,kod VARCHAR(75) null,nazvanie_ru VARCHAR(75) null,nazvanie_tj VARCHAR(75) null,nazvanie_en VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table klassifikatory.jekb";
	public static final String ORDER_BY_JPQL = " ORDER BY jekb.jekb_id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY klassifikatory.jekb.jekb_id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(tj.jekb.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.tj.jekb.model.Jekb"), true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(tj.jekb.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.tj.jekb.model.Jekb"), true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(tj.jekb.service.util.ServiceProps.get(
				"lock.expiration.time.tj.jekb.model.Jekb"));

	public JekbModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _jekb_id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setJekb_id(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _jekb_id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Jekb.class;
	}

	@Override
	public String getModelClassName() {
		return Jekb.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("jekb_id", getJekb_id());
		attributes.put("kod", getKod());
		attributes.put("nazvanie_ru", getNazvanie_ru());
		attributes.put("nazvanie_tj", getNazvanie_tj());
		attributes.put("nazvanie_en", getNazvanie_en());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long jekb_id = (Long)attributes.get("jekb_id");

		if (jekb_id != null) {
			setJekb_id(jekb_id);
		}

		String kod = (String)attributes.get("kod");

		if (kod != null) {
			setKod(kod);
		}

		String nazvanie_ru = (String)attributes.get("nazvanie_ru");

		if (nazvanie_ru != null) {
			setNazvanie_ru(nazvanie_ru);
		}

		String nazvanie_tj = (String)attributes.get("nazvanie_tj");

		if (nazvanie_tj != null) {
			setNazvanie_tj(nazvanie_tj);
		}

		String nazvanie_en = (String)attributes.get("nazvanie_en");

		if (nazvanie_en != null) {
			setNazvanie_en(nazvanie_en);
		}
	}

	@Override
	public long getJekb_id() {
		return _jekb_id;
	}

	@Override
	public void setJekb_id(long jekb_id) {
		_jekb_id = jekb_id;
	}

	@Override
	public String getKod() {
		if (_kod == null) {
			return StringPool.BLANK;
		}
		else {
			return _kod;
		}
	}

	@Override
	public void setKod(String kod) {
		_kod = kod;
	}

	@Override
	public String getNazvanie_ru() {
		if (_nazvanie_ru == null) {
			return StringPool.BLANK;
		}
		else {
			return _nazvanie_ru;
		}
	}

	@Override
	public void setNazvanie_ru(String nazvanie_ru) {
		_nazvanie_ru = nazvanie_ru;
	}

	@Override
	public String getNazvanie_tj() {
		if (_nazvanie_tj == null) {
			return StringPool.BLANK;
		}
		else {
			return _nazvanie_tj;
		}
	}

	@Override
	public void setNazvanie_tj(String nazvanie_tj) {
		_nazvanie_tj = nazvanie_tj;
	}

	@Override
	public String getNazvanie_en() {
		if (_nazvanie_en == null) {
			return StringPool.BLANK;
		}
		else {
			return _nazvanie_en;
		}
	}

	@Override
	public void setNazvanie_en(String nazvanie_en) {
		_nazvanie_en = nazvanie_en;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Jekb.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Jekb toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Jekb)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		JekbImpl jekbImpl = new JekbImpl();

		jekbImpl.setJekb_id(getJekb_id());
		jekbImpl.setKod(getKod());
		jekbImpl.setNazvanie_ru(getNazvanie_ru());
		jekbImpl.setNazvanie_tj(getNazvanie_tj());
		jekbImpl.setNazvanie_en(getNazvanie_en());

		jekbImpl.resetOriginalValues();

		return jekbImpl;
	}

	@Override
	public int compareTo(Jekb jekb) {
		long primaryKey = jekb.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Jekb)) {
			return false;
		}

		Jekb jekb = (Jekb)obj;

		long primaryKey = jekb.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Jekb> toCacheModel() {
		JekbCacheModel jekbCacheModel = new JekbCacheModel();

		jekbCacheModel.jekb_id = getJekb_id();

		jekbCacheModel.kod = getKod();

		String kod = jekbCacheModel.kod;

		if ((kod != null) && (kod.length() == 0)) {
			jekbCacheModel.kod = null;
		}

		jekbCacheModel.nazvanie_ru = getNazvanie_ru();

		String nazvanie_ru = jekbCacheModel.nazvanie_ru;

		if ((nazvanie_ru != null) && (nazvanie_ru.length() == 0)) {
			jekbCacheModel.nazvanie_ru = null;
		}

		jekbCacheModel.nazvanie_tj = getNazvanie_tj();

		String nazvanie_tj = jekbCacheModel.nazvanie_tj;

		if ((nazvanie_tj != null) && (nazvanie_tj.length() == 0)) {
			jekbCacheModel.nazvanie_tj = null;
		}

		jekbCacheModel.nazvanie_en = getNazvanie_en();

		String nazvanie_en = jekbCacheModel.nazvanie_en;

		if ((nazvanie_en != null) && (nazvanie_en.length() == 0)) {
			jekbCacheModel.nazvanie_en = null;
		}

		return jekbCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{jekb_id=");
		sb.append(getJekb_id());
		sb.append(", kod=");
		sb.append(getKod());
		sb.append(", nazvanie_ru=");
		sb.append(getNazvanie_ru());
		sb.append(", nazvanie_tj=");
		sb.append(getNazvanie_tj());
		sb.append(", nazvanie_en=");
		sb.append(getNazvanie_en());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("tj.jekb.model.Jekb");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>jekb_id</column-name><column-value><![CDATA[");
		sb.append(getJekb_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>kod</column-name><column-value><![CDATA[");
		sb.append(getKod());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nazvanie_ru</column-name><column-value><![CDATA[");
		sb.append(getNazvanie_ru());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nazvanie_tj</column-name><column-value><![CDATA[");
		sb.append(getNazvanie_tj());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nazvanie_en</column-name><column-value><![CDATA[");
		sb.append(getNazvanie_en());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Jekb.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Jekb.class
		};
	private long _jekb_id;
	private String _kod;
	private String _nazvanie_ru;
	private String _nazvanie_tj;
	private String _nazvanie_en;
	private Jekb _escapedModel;
}