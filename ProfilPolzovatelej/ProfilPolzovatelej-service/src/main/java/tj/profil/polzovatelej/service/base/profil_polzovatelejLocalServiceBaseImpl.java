/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package tj.profil.polzovatelej.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import tj.profil.polzovatelej.model.profil_polzovatelej;
import tj.profil.polzovatelej.service.persistence.profil_polzovatelejPersistence;
import tj.profil.polzovatelej.service.profil_polzovatelejLocalService;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the profil_polzovatelej local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link tj.profil.polzovatelej.service.impl.profil_polzovatelejLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see tj.profil.polzovatelej.service.impl.profil_polzovatelejLocalServiceImpl
 * @see tj.profil.polzovatelej.service.profil_polzovatelejLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class profil_polzovatelejLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements profil_polzovatelejLocalService,
		IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link tj.profil.polzovatelej.service.profil_polzovatelejLocalServiceUtil} to access the profil_polzovatelej local service.
	 */

	/**
	 * Adds the profil_polzovatelej to the database. Also notifies the appropriate model listeners.
	 *
	 * @param profil_polzovatelej the profil_polzovatelej
	 * @return the profil_polzovatelej that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public profil_polzovatelej addprofil_polzovatelej(
		profil_polzovatelej profil_polzovatelej) {
		profil_polzovatelej.setNew(true);

		return profil_polzovatelejPersistence.update(profil_polzovatelej);
	}

	/**
	 * Creates a new profil_polzovatelej with the primary key. Does not add the profil_polzovatelej to the database.
	 *
	 * @param profil_polzovatelej_id the primary key for the new profil_polzovatelej
	 * @return the new profil_polzovatelej
	 */
	@Override
	public profil_polzovatelej createprofil_polzovatelej(
		long profil_polzovatelej_id) {
		return profil_polzovatelejPersistence.create(profil_polzovatelej_id);
	}

	/**
	 * Deletes the profil_polzovatelej with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param profil_polzovatelej_id the primary key of the profil_polzovatelej
	 * @return the profil_polzovatelej that was removed
	 * @throws PortalException if a profil_polzovatelej with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public profil_polzovatelej deleteprofil_polzovatelej(
		long profil_polzovatelej_id) throws PortalException {
		return profil_polzovatelejPersistence.remove(profil_polzovatelej_id);
	}

	/**
	 * Deletes the profil_polzovatelej from the database. Also notifies the appropriate model listeners.
	 *
	 * @param profil_polzovatelej the profil_polzovatelej
	 * @return the profil_polzovatelej that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public profil_polzovatelej deleteprofil_polzovatelej(
		profil_polzovatelej profil_polzovatelej) {
		return profil_polzovatelejPersistence.remove(profil_polzovatelej);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(profil_polzovatelej.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return profil_polzovatelejPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link tj.profil.polzovatelej.model.impl.profil_polzovatelejModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return profil_polzovatelejPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link tj.profil.polzovatelej.model.impl.profil_polzovatelejModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return profil_polzovatelejPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return profil_polzovatelejPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return profil_polzovatelejPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public profil_polzovatelej fetchprofil_polzovatelej(
		long profil_polzovatelej_id) {
		return profil_polzovatelejPersistence.fetchByPrimaryKey(profil_polzovatelej_id);
	}

	/**
	 * Returns the profil_polzovatelej with the primary key.
	 *
	 * @param profil_polzovatelej_id the primary key of the profil_polzovatelej
	 * @return the profil_polzovatelej
	 * @throws PortalException if a profil_polzovatelej with the primary key could not be found
	 */
	@Override
	public profil_polzovatelej getprofil_polzovatelej(
		long profil_polzovatelej_id) throws PortalException {
		return profil_polzovatelejPersistence.findByPrimaryKey(profil_polzovatelej_id);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(profil_polzovatelejLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(profil_polzovatelej.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName(
			"profil_polzovatelej_id");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(profil_polzovatelejLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(profil_polzovatelej.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName(
			"profil_polzovatelej_id");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(profil_polzovatelejLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(profil_polzovatelej.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName(
			"profil_polzovatelej_id");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return profil_polzovatelejLocalService.deleteprofil_polzovatelej((profil_polzovatelej)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return profil_polzovatelejPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the profil_polzovatelejs.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link tj.profil.polzovatelej.model.impl.profil_polzovatelejModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of profil_polzovatelejs
	 * @param end the upper bound of the range of profil_polzovatelejs (not inclusive)
	 * @return the range of profil_polzovatelejs
	 */
	@Override
	public List<profil_polzovatelej> getprofil_polzovatelejs(int start, int end) {
		return profil_polzovatelejPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of profil_polzovatelejs.
	 *
	 * @return the number of profil_polzovatelejs
	 */
	@Override
	public int getprofil_polzovatelejsCount() {
		return profil_polzovatelejPersistence.countAll();
	}

	/**
	 * Updates the profil_polzovatelej in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param profil_polzovatelej the profil_polzovatelej
	 * @return the profil_polzovatelej that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public profil_polzovatelej updateprofil_polzovatelej(
		profil_polzovatelej profil_polzovatelej) {
		return profil_polzovatelejPersistence.update(profil_polzovatelej);
	}

	/**
	 * Returns the profil_polzovatelej local service.
	 *
	 * @return the profil_polzovatelej local service
	 */
	public profil_polzovatelejLocalService getprofil_polzovatelejLocalService() {
		return profil_polzovatelejLocalService;
	}

	/**
	 * Sets the profil_polzovatelej local service.
	 *
	 * @param profil_polzovatelejLocalService the profil_polzovatelej local service
	 */
	public void setprofil_polzovatelejLocalService(
		profil_polzovatelejLocalService profil_polzovatelejLocalService) {
		this.profil_polzovatelejLocalService = profil_polzovatelejLocalService;
	}

	/**
	 * Returns the profil_polzovatelej persistence.
	 *
	 * @return the profil_polzovatelej persistence
	 */
	public profil_polzovatelejPersistence getprofil_polzovatelejPersistence() {
		return profil_polzovatelejPersistence;
	}

	/**
	 * Sets the profil_polzovatelej persistence.
	 *
	 * @param profil_polzovatelejPersistence the profil_polzovatelej persistence
	 */
	public void setprofil_polzovatelejPersistence(
		profil_polzovatelejPersistence profil_polzovatelejPersistence) {
		this.profil_polzovatelejPersistence = profil_polzovatelejPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("tj.profil.polzovatelej.model.profil_polzovatelej",
			profil_polzovatelejLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"tj.profil.polzovatelej.model.profil_polzovatelej");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return profil_polzovatelejLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return profil_polzovatelej.class;
	}

	protected String getModelClassName() {
		return profil_polzovatelej.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = profil_polzovatelejPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = profil_polzovatelejLocalService.class)
	protected profil_polzovatelejLocalService profil_polzovatelejLocalService;
	@BeanReference(type = profil_polzovatelejPersistence.class)
	protected profil_polzovatelejPersistence profil_polzovatelejPersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}