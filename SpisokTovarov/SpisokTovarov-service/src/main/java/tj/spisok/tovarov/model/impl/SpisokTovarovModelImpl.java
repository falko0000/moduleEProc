/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package tj.spisok.tovarov.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import tj.spisok.tovarov.model.SpisokTovarov;
import tj.spisok.tovarov.model.SpisokTovarovModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the SpisokTovarov service. Represents a row in the &quot;sapp.spisok_tovarov&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link SpisokTovarovModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SpisokTovarovImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see SpisokTovarovImpl
 * @see SpisokTovarov
 * @see SpisokTovarovModel
 * @generated
 */
@ProviderType
public class SpisokTovarovModelImpl extends BaseModelImpl<SpisokTovarov>
	implements SpisokTovarovModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a spisok tovarov model instance should use the {@link SpisokTovarov} interface instead.
	 */
	public static final String TABLE_NAME = "sapp.spisok_tovarov";
	public static final Object[][] TABLE_COLUMNS = {
			{ "data_izmenenija", Types.TIMESTAMP },
			{ "data_sozdanija", Types.TIMESTAMP },
			{ "edinica_izmerenija_id", Types.BIGINT },
			{ "izmenil", Types.BIGINT },
			{ "izvewenie_id", Types.BIGINT },
			{ "klassifikacija_po_okdp", Types.VARCHAR },
			{ "kod_po_okdp", Types.VARCHAR },
			{ "kod_po_spravochniku_naimenovanij", Types.BIGINT },
			{ "kod_strany_proizvoditelja", Types.BIGINT },
			{ "kolichestvo", Types.BIGINT },
			{ "lot_id", Types.BIGINT },
			{ "naimenovanie_tovara", Types.VARCHAR },
			{ "opisanie_tovara", Types.VARCHAR },
			{ "sozdal", Types.BIGINT },
			{ "spisok_tovarov_id", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("data_izmenenija", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("data_sozdanija", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("edinica_izmerenija_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("izmenil", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("izvewenie_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("klassifikacija_po_okdp", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("kod_po_okdp", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("kod_po_spravochniku_naimenovanij", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("kod_strany_proizvoditelja", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("kolichestvo", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("lot_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("naimenovanie_tovara", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("opisanie_tovara", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sozdal", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("spisok_tovarov_id", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table sapp.spisok_tovarov (data_izmenenija DATE null,data_sozdanija DATE null,edinica_izmerenija_id LONG,izmenil LONG,izvewenie_id LONG,klassifikacija_po_okdp VARCHAR(75) null,kod_po_okdp VARCHAR(75) null,kod_po_spravochniku_naimenovanij LONG,kod_strany_proizvoditelja LONG,kolichestvo LONG,lot_id LONG,naimenovanie_tovara VARCHAR(75) null,opisanie_tovara VARCHAR(75) null,sozdal LONG,spisok_tovarov_id LONG not null primary key)";
	public static final String TABLE_SQL_DROP = "drop table sapp.spisok_tovarov";
	public static final String ORDER_BY_JPQL = " ORDER BY spisokTovarov.spisok_tovarov_id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY sapp.spisok_tovarov.spisok_tovarov_id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(tj.spisok.tovarov.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.tj.spisok.tovarov.model.SpisokTovarov"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(tj.spisok.tovarov.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.tj.spisok.tovarov.model.SpisokTovarov"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(tj.spisok.tovarov.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.tj.spisok.tovarov.model.SpisokTovarov"),
			true);
	public static final long LOT_ID_COLUMN_BITMASK = 1L;
	public static final long SPISOK_TOVAROV_ID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(tj.spisok.tovarov.service.util.ServiceProps.get(
				"lock.expiration.time.tj.spisok.tovarov.model.SpisokTovarov"));

	public SpisokTovarovModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _spisok_tovarov_id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSpisok_tovarov_id(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _spisok_tovarov_id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SpisokTovarov.class;
	}

	@Override
	public String getModelClassName() {
		return SpisokTovarov.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("data_izmenenija", getData_izmenenija());
		attributes.put("data_sozdanija", getData_sozdanija());
		attributes.put("edinica_izmerenija_id", getEdinica_izmerenija_id());
		attributes.put("izmenil", getIzmenil());
		attributes.put("izvewenie_id", getIzvewenie_id());
		attributes.put("klassifikacija_po_okdp", getKlassifikacija_po_okdp());
		attributes.put("kod_po_okdp", getKod_po_okdp());
		attributes.put("kod_po_spravochniku_naimenovanij",
			getKod_po_spravochniku_naimenovanij());
		attributes.put("kod_strany_proizvoditelja",
			getKod_strany_proizvoditelja());
		attributes.put("kolichestvo", getKolichestvo());
		attributes.put("lot_id", getLot_id());
		attributes.put("naimenovanie_tovara", getNaimenovanie_tovara());
		attributes.put("opisanie_tovara", getOpisanie_tovara());
		attributes.put("sozdal", getSozdal());
		attributes.put("spisok_tovarov_id", getSpisok_tovarov_id());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Date data_izmenenija = (Date)attributes.get("data_izmenenija");

		if (data_izmenenija != null) {
			setData_izmenenija(data_izmenenija);
		}

		Date data_sozdanija = (Date)attributes.get("data_sozdanija");

		if (data_sozdanija != null) {
			setData_sozdanija(data_sozdanija);
		}

		Long edinica_izmerenija_id = (Long)attributes.get(
				"edinica_izmerenija_id");

		if (edinica_izmerenija_id != null) {
			setEdinica_izmerenija_id(edinica_izmerenija_id);
		}

		Long izmenil = (Long)attributes.get("izmenil");

		if (izmenil != null) {
			setIzmenil(izmenil);
		}

		Long izvewenie_id = (Long)attributes.get("izvewenie_id");

		if (izvewenie_id != null) {
			setIzvewenie_id(izvewenie_id);
		}

		String klassifikacija_po_okdp = (String)attributes.get(
				"klassifikacija_po_okdp");

		if (klassifikacija_po_okdp != null) {
			setKlassifikacija_po_okdp(klassifikacija_po_okdp);
		}

		String kod_po_okdp = (String)attributes.get("kod_po_okdp");

		if (kod_po_okdp != null) {
			setKod_po_okdp(kod_po_okdp);
		}

		Long kod_po_spravochniku_naimenovanij = (Long)attributes.get(
				"kod_po_spravochniku_naimenovanij");

		if (kod_po_spravochniku_naimenovanij != null) {
			setKod_po_spravochniku_naimenovanij(kod_po_spravochniku_naimenovanij);
		}

		Long kod_strany_proizvoditelja = (Long)attributes.get(
				"kod_strany_proizvoditelja");

		if (kod_strany_proizvoditelja != null) {
			setKod_strany_proizvoditelja(kod_strany_proizvoditelja);
		}

		Long kolichestvo = (Long)attributes.get("kolichestvo");

		if (kolichestvo != null) {
			setKolichestvo(kolichestvo);
		}

		Long lot_id = (Long)attributes.get("lot_id");

		if (lot_id != null) {
			setLot_id(lot_id);
		}

		String naimenovanie_tovara = (String)attributes.get(
				"naimenovanie_tovara");

		if (naimenovanie_tovara != null) {
			setNaimenovanie_tovara(naimenovanie_tovara);
		}

		String opisanie_tovara = (String)attributes.get("opisanie_tovara");

		if (opisanie_tovara != null) {
			setOpisanie_tovara(opisanie_tovara);
		}

		Long sozdal = (Long)attributes.get("sozdal");

		if (sozdal != null) {
			setSozdal(sozdal);
		}

		Long spisok_tovarov_id = (Long)attributes.get("spisok_tovarov_id");

		if (spisok_tovarov_id != null) {
			setSpisok_tovarov_id(spisok_tovarov_id);
		}
	}

	@Override
	public Date getData_izmenenija() {
		return _data_izmenenija;
	}

	@Override
	public void setData_izmenenija(Date data_izmenenija) {
		_data_izmenenija = data_izmenenija;
	}

	@Override
	public Date getData_sozdanija() {
		return _data_sozdanija;
	}

	@Override
	public void setData_sozdanija(Date data_sozdanija) {
		_data_sozdanija = data_sozdanija;
	}

	@Override
	public long getEdinica_izmerenija_id() {
		return _edinica_izmerenija_id;
	}

	@Override
	public void setEdinica_izmerenija_id(long edinica_izmerenija_id) {
		_edinica_izmerenija_id = edinica_izmerenija_id;
	}

	@Override
	public long getIzmenil() {
		return _izmenil;
	}

	@Override
	public void setIzmenil(long izmenil) {
		_izmenil = izmenil;
	}

	@Override
	public long getIzvewenie_id() {
		return _izvewenie_id;
	}

	@Override
	public void setIzvewenie_id(long izvewenie_id) {
		_izvewenie_id = izvewenie_id;
	}

	@Override
	public String getKlassifikacija_po_okdp() {
		if (_klassifikacija_po_okdp == null) {
			return StringPool.BLANK;
		}
		else {
			return _klassifikacija_po_okdp;
		}
	}

	@Override
	public void setKlassifikacija_po_okdp(String klassifikacija_po_okdp) {
		_klassifikacija_po_okdp = klassifikacija_po_okdp;
	}

	@Override
	public String getKod_po_okdp() {
		if (_kod_po_okdp == null) {
			return StringPool.BLANK;
		}
		else {
			return _kod_po_okdp;
		}
	}

	@Override
	public void setKod_po_okdp(String kod_po_okdp) {
		_kod_po_okdp = kod_po_okdp;
	}

	@Override
	public long getKod_po_spravochniku_naimenovanij() {
		return _kod_po_spravochniku_naimenovanij;
	}

	@Override
	public void setKod_po_spravochniku_naimenovanij(
		long kod_po_spravochniku_naimenovanij) {
		_kod_po_spravochniku_naimenovanij = kod_po_spravochniku_naimenovanij;
	}

	@Override
	public long getKod_strany_proizvoditelja() {
		return _kod_strany_proizvoditelja;
	}

	@Override
	public void setKod_strany_proizvoditelja(long kod_strany_proizvoditelja) {
		_kod_strany_proizvoditelja = kod_strany_proizvoditelja;
	}

	@Override
	public long getKolichestvo() {
		return _kolichestvo;
	}

	@Override
	public void setKolichestvo(long kolichestvo) {
		_kolichestvo = kolichestvo;
	}

	@Override
	public long getLot_id() {
		return _lot_id;
	}

	@Override
	public void setLot_id(long lot_id) {
		_columnBitmask |= LOT_ID_COLUMN_BITMASK;

		if (!_setOriginalLot_id) {
			_setOriginalLot_id = true;

			_originalLot_id = _lot_id;
		}

		_lot_id = lot_id;
	}

	public long getOriginalLot_id() {
		return _originalLot_id;
	}

	@Override
	public String getNaimenovanie_tovara() {
		if (_naimenovanie_tovara == null) {
			return StringPool.BLANK;
		}
		else {
			return _naimenovanie_tovara;
		}
	}

	@Override
	public void setNaimenovanie_tovara(String naimenovanie_tovara) {
		_naimenovanie_tovara = naimenovanie_tovara;
	}

	@Override
	public String getOpisanie_tovara() {
		if (_opisanie_tovara == null) {
			return StringPool.BLANK;
		}
		else {
			return _opisanie_tovara;
		}
	}

	@Override
	public void setOpisanie_tovara(String opisanie_tovara) {
		_opisanie_tovara = opisanie_tovara;
	}

	@Override
	public long getSozdal() {
		return _sozdal;
	}

	@Override
	public void setSozdal(long sozdal) {
		_sozdal = sozdal;
	}

	@Override
	public long getSpisok_tovarov_id() {
		return _spisok_tovarov_id;
	}

	@Override
	public void setSpisok_tovarov_id(long spisok_tovarov_id) {
		_spisok_tovarov_id = spisok_tovarov_id;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			SpisokTovarov.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SpisokTovarov toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (SpisokTovarov)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SpisokTovarovImpl spisokTovarovImpl = new SpisokTovarovImpl();

		spisokTovarovImpl.setData_izmenenija(getData_izmenenija());
		spisokTovarovImpl.setData_sozdanija(getData_sozdanija());
		spisokTovarovImpl.setEdinica_izmerenija_id(getEdinica_izmerenija_id());
		spisokTovarovImpl.setIzmenil(getIzmenil());
		spisokTovarovImpl.setIzvewenie_id(getIzvewenie_id());
		spisokTovarovImpl.setKlassifikacija_po_okdp(getKlassifikacija_po_okdp());
		spisokTovarovImpl.setKod_po_okdp(getKod_po_okdp());
		spisokTovarovImpl.setKod_po_spravochniku_naimenovanij(getKod_po_spravochniku_naimenovanij());
		spisokTovarovImpl.setKod_strany_proizvoditelja(getKod_strany_proizvoditelja());
		spisokTovarovImpl.setKolichestvo(getKolichestvo());
		spisokTovarovImpl.setLot_id(getLot_id());
		spisokTovarovImpl.setNaimenovanie_tovara(getNaimenovanie_tovara());
		spisokTovarovImpl.setOpisanie_tovara(getOpisanie_tovara());
		spisokTovarovImpl.setSozdal(getSozdal());
		spisokTovarovImpl.setSpisok_tovarov_id(getSpisok_tovarov_id());

		spisokTovarovImpl.resetOriginalValues();

		return spisokTovarovImpl;
	}

	@Override
	public int compareTo(SpisokTovarov spisokTovarov) {
		long primaryKey = spisokTovarov.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SpisokTovarov)) {
			return false;
		}

		SpisokTovarov spisokTovarov = (SpisokTovarov)obj;

		long primaryKey = spisokTovarov.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		SpisokTovarovModelImpl spisokTovarovModelImpl = this;

		spisokTovarovModelImpl._originalLot_id = spisokTovarovModelImpl._lot_id;

		spisokTovarovModelImpl._setOriginalLot_id = false;

		spisokTovarovModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<SpisokTovarov> toCacheModel() {
		SpisokTovarovCacheModel spisokTovarovCacheModel = new SpisokTovarovCacheModel();

		Date data_izmenenija = getData_izmenenija();

		if (data_izmenenija != null) {
			spisokTovarovCacheModel.data_izmenenija = data_izmenenija.getTime();
		}
		else {
			spisokTovarovCacheModel.data_izmenenija = Long.MIN_VALUE;
		}

		Date data_sozdanija = getData_sozdanija();

		if (data_sozdanija != null) {
			spisokTovarovCacheModel.data_sozdanija = data_sozdanija.getTime();
		}
		else {
			spisokTovarovCacheModel.data_sozdanija = Long.MIN_VALUE;
		}

		spisokTovarovCacheModel.edinica_izmerenija_id = getEdinica_izmerenija_id();

		spisokTovarovCacheModel.izmenil = getIzmenil();

		spisokTovarovCacheModel.izvewenie_id = getIzvewenie_id();

		spisokTovarovCacheModel.klassifikacija_po_okdp = getKlassifikacija_po_okdp();

		String klassifikacija_po_okdp = spisokTovarovCacheModel.klassifikacija_po_okdp;

		if ((klassifikacija_po_okdp != null) &&
				(klassifikacija_po_okdp.length() == 0)) {
			spisokTovarovCacheModel.klassifikacija_po_okdp = null;
		}

		spisokTovarovCacheModel.kod_po_okdp = getKod_po_okdp();

		String kod_po_okdp = spisokTovarovCacheModel.kod_po_okdp;

		if ((kod_po_okdp != null) && (kod_po_okdp.length() == 0)) {
			spisokTovarovCacheModel.kod_po_okdp = null;
		}

		spisokTovarovCacheModel.kod_po_spravochniku_naimenovanij = getKod_po_spravochniku_naimenovanij();

		spisokTovarovCacheModel.kod_strany_proizvoditelja = getKod_strany_proizvoditelja();

		spisokTovarovCacheModel.kolichestvo = getKolichestvo();

		spisokTovarovCacheModel.lot_id = getLot_id();

		spisokTovarovCacheModel.naimenovanie_tovara = getNaimenovanie_tovara();

		String naimenovanie_tovara = spisokTovarovCacheModel.naimenovanie_tovara;

		if ((naimenovanie_tovara != null) &&
				(naimenovanie_tovara.length() == 0)) {
			spisokTovarovCacheModel.naimenovanie_tovara = null;
		}

		spisokTovarovCacheModel.opisanie_tovara = getOpisanie_tovara();

		String opisanie_tovara = spisokTovarovCacheModel.opisanie_tovara;

		if ((opisanie_tovara != null) && (opisanie_tovara.length() == 0)) {
			spisokTovarovCacheModel.opisanie_tovara = null;
		}

		spisokTovarovCacheModel.sozdal = getSozdal();

		spisokTovarovCacheModel.spisok_tovarov_id = getSpisok_tovarov_id();

		return spisokTovarovCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(31);

		sb.append("{data_izmenenija=");
		sb.append(getData_izmenenija());
		sb.append(", data_sozdanija=");
		sb.append(getData_sozdanija());
		sb.append(", edinica_izmerenija_id=");
		sb.append(getEdinica_izmerenija_id());
		sb.append(", izmenil=");
		sb.append(getIzmenil());
		sb.append(", izvewenie_id=");
		sb.append(getIzvewenie_id());
		sb.append(", klassifikacija_po_okdp=");
		sb.append(getKlassifikacija_po_okdp());
		sb.append(", kod_po_okdp=");
		sb.append(getKod_po_okdp());
		sb.append(", kod_po_spravochniku_naimenovanij=");
		sb.append(getKod_po_spravochniku_naimenovanij());
		sb.append(", kod_strany_proizvoditelja=");
		sb.append(getKod_strany_proizvoditelja());
		sb.append(", kolichestvo=");
		sb.append(getKolichestvo());
		sb.append(", lot_id=");
		sb.append(getLot_id());
		sb.append(", naimenovanie_tovara=");
		sb.append(getNaimenovanie_tovara());
		sb.append(", opisanie_tovara=");
		sb.append(getOpisanie_tovara());
		sb.append(", sozdal=");
		sb.append(getSozdal());
		sb.append(", spisok_tovarov_id=");
		sb.append(getSpisok_tovarov_id());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(49);

		sb.append("<model><model-name>");
		sb.append("tj.spisok.tovarov.model.SpisokTovarov");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>data_izmenenija</column-name><column-value><![CDATA[");
		sb.append(getData_izmenenija());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>data_sozdanija</column-name><column-value><![CDATA[");
		sb.append(getData_sozdanija());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>edinica_izmerenija_id</column-name><column-value><![CDATA[");
		sb.append(getEdinica_izmerenija_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>izmenil</column-name><column-value><![CDATA[");
		sb.append(getIzmenil());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>izvewenie_id</column-name><column-value><![CDATA[");
		sb.append(getIzvewenie_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>klassifikacija_po_okdp</column-name><column-value><![CDATA[");
		sb.append(getKlassifikacija_po_okdp());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>kod_po_okdp</column-name><column-value><![CDATA[");
		sb.append(getKod_po_okdp());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>kod_po_spravochniku_naimenovanij</column-name><column-value><![CDATA[");
		sb.append(getKod_po_spravochniku_naimenovanij());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>kod_strany_proizvoditelja</column-name><column-value><![CDATA[");
		sb.append(getKod_strany_proizvoditelja());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>kolichestvo</column-name><column-value><![CDATA[");
		sb.append(getKolichestvo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lot_id</column-name><column-value><![CDATA[");
		sb.append(getLot_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>naimenovanie_tovara</column-name><column-value><![CDATA[");
		sb.append(getNaimenovanie_tovara());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>opisanie_tovara</column-name><column-value><![CDATA[");
		sb.append(getOpisanie_tovara());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sozdal</column-name><column-value><![CDATA[");
		sb.append(getSozdal());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>spisok_tovarov_id</column-name><column-value><![CDATA[");
		sb.append(getSpisok_tovarov_id());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = SpisokTovarov.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			SpisokTovarov.class
		};
	private Date _data_izmenenija;
	private Date _data_sozdanija;
	private long _edinica_izmerenija_id;
	private long _izmenil;
	private long _izvewenie_id;
	private String _klassifikacija_po_okdp;
	private String _kod_po_okdp;
	private long _kod_po_spravochniku_naimenovanij;
	private long _kod_strany_proizvoditelja;
	private long _kolichestvo;
	private long _lot_id;
	private long _originalLot_id;
	private boolean _setOriginalLot_id;
	private String _naimenovanie_tovara;
	private String _opisanie_tovara;
	private long _sozdal;
	private long _spisok_tovarov_id;
	private long _columnBitmask;
	private SpisokTovarov _escapedModel;
}