/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package tj.supplier.request.lot.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import tj.supplier.request.lot.model.SupplierRequestLot;
import tj.supplier.request.lot.model.SupplierRequestLotModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the SupplierRequestLot service. Represents a row in the &quot;sapp.supplier_request_lot&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link SupplierRequestLotModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SupplierRequestLotImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see SupplierRequestLotImpl
 * @see SupplierRequestLot
 * @see SupplierRequestLotModel
 * @generated
 */
@ProviderType
public class SupplierRequestLotModelImpl extends BaseModelImpl<SupplierRequestLot>
	implements SupplierRequestLotModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a supplier request lot model instance should use the {@link SupplierRequestLot} interface instead.
	 */
	public static final String TABLE_NAME = "sapp.supplier_request_lot";
	public static final Object[][] TABLE_COLUMNS = {
			{ "supplier_request_lot_id", Types.BIGINT },
			{ "organization_id", Types.BIGINT },
			{ "spisok_lotov_id", Types.BIGINT },
			{ "sub_application", Types.BOOLEAN },
			{ "withdrawn", Types.INTEGER }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("supplier_request_lot_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("organization_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("spisok_lotov_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("sub_application", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("withdrawn", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE = "create table sapp.supplier_request_lot (supplier_request_lot_id LONG not null primary key,organization_id LONG,spisok_lotov_id LONG,sub_application BOOLEAN,withdrawn INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table sapp.supplier_request_lot";
	public static final String ORDER_BY_JPQL = " ORDER BY supplierRequestLot.supplier_request_lot_id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY sapp.supplier_request_lot.supplier_request_lot_id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(tj.supplier.request.lot.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.tj.supplier.request.lot.model.SupplierRequestLot"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(tj.supplier.request.lot.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.tj.supplier.request.lot.model.SupplierRequestLot"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(tj.supplier.request.lot.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.tj.supplier.request.lot.model.SupplierRequestLot"),
			true);
	public static final long ORGANIZATION_ID_COLUMN_BITMASK = 1L;
	public static final long SPISOK_LOTOV_ID_COLUMN_BITMASK = 2L;
	public static final long SUPPLIER_REQUEST_LOT_ID_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(tj.supplier.request.lot.service.util.ServiceProps.get(
				"lock.expiration.time.tj.supplier.request.lot.model.SupplierRequestLot"));

	public SupplierRequestLotModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _supplier_request_lot_id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSupplier_request_lot_id(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _supplier_request_lot_id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SupplierRequestLot.class;
	}

	@Override
	public String getModelClassName() {
		return SupplierRequestLot.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("supplier_request_lot_id", getSupplier_request_lot_id());
		attributes.put("organization_id", getOrganization_id());
		attributes.put("spisok_lotov_id", getSpisok_lotov_id());
		attributes.put("sub_application", getSub_application());
		attributes.put("withdrawn", getWithdrawn());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long supplier_request_lot_id = (Long)attributes.get(
				"supplier_request_lot_id");

		if (supplier_request_lot_id != null) {
			setSupplier_request_lot_id(supplier_request_lot_id);
		}

		Long organization_id = (Long)attributes.get("organization_id");

		if (organization_id != null) {
			setOrganization_id(organization_id);
		}

		Long spisok_lotov_id = (Long)attributes.get("spisok_lotov_id");

		if (spisok_lotov_id != null) {
			setSpisok_lotov_id(spisok_lotov_id);
		}

		Boolean sub_application = (Boolean)attributes.get("sub_application");

		if (sub_application != null) {
			setSub_application(sub_application);
		}

		Integer withdrawn = (Integer)attributes.get("withdrawn");

		if (withdrawn != null) {
			setWithdrawn(withdrawn);
		}
	}

	@Override
	public long getSupplier_request_lot_id() {
		return _supplier_request_lot_id;
	}

	@Override
	public void setSupplier_request_lot_id(long supplier_request_lot_id) {
		_supplier_request_lot_id = supplier_request_lot_id;
	}

	@Override
	public long getOrganization_id() {
		return _organization_id;
	}

	@Override
	public void setOrganization_id(long organization_id) {
		_columnBitmask |= ORGANIZATION_ID_COLUMN_BITMASK;

		if (!_setOriginalOrganization_id) {
			_setOriginalOrganization_id = true;

			_originalOrganization_id = _organization_id;
		}

		_organization_id = organization_id;
	}

	public long getOriginalOrganization_id() {
		return _originalOrganization_id;
	}

	@Override
	public long getSpisok_lotov_id() {
		return _spisok_lotov_id;
	}

	@Override
	public void setSpisok_lotov_id(long spisok_lotov_id) {
		_columnBitmask |= SPISOK_LOTOV_ID_COLUMN_BITMASK;

		if (!_setOriginalSpisok_lotov_id) {
			_setOriginalSpisok_lotov_id = true;

			_originalSpisok_lotov_id = _spisok_lotov_id;
		}

		_spisok_lotov_id = spisok_lotov_id;
	}

	public long getOriginalSpisok_lotov_id() {
		return _originalSpisok_lotov_id;
	}

	@Override
	public boolean getSub_application() {
		return _sub_application;
	}

	@Override
	public boolean isSub_application() {
		return _sub_application;
	}

	@Override
	public void setSub_application(boolean sub_application) {
		_sub_application = sub_application;
	}

	@Override
	public int getWithdrawn() {
		return _withdrawn;
	}

	@Override
	public void setWithdrawn(int withdrawn) {
		_withdrawn = withdrawn;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			SupplierRequestLot.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SupplierRequestLot toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (SupplierRequestLot)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SupplierRequestLotImpl supplierRequestLotImpl = new SupplierRequestLotImpl();

		supplierRequestLotImpl.setSupplier_request_lot_id(getSupplier_request_lot_id());
		supplierRequestLotImpl.setOrganization_id(getOrganization_id());
		supplierRequestLotImpl.setSpisok_lotov_id(getSpisok_lotov_id());
		supplierRequestLotImpl.setSub_application(getSub_application());
		supplierRequestLotImpl.setWithdrawn(getWithdrawn());

		supplierRequestLotImpl.resetOriginalValues();

		return supplierRequestLotImpl;
	}

	@Override
	public int compareTo(SupplierRequestLot supplierRequestLot) {
		long primaryKey = supplierRequestLot.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SupplierRequestLot)) {
			return false;
		}

		SupplierRequestLot supplierRequestLot = (SupplierRequestLot)obj;

		long primaryKey = supplierRequestLot.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		SupplierRequestLotModelImpl supplierRequestLotModelImpl = this;

		supplierRequestLotModelImpl._originalOrganization_id = supplierRequestLotModelImpl._organization_id;

		supplierRequestLotModelImpl._setOriginalOrganization_id = false;

		supplierRequestLotModelImpl._originalSpisok_lotov_id = supplierRequestLotModelImpl._spisok_lotov_id;

		supplierRequestLotModelImpl._setOriginalSpisok_lotov_id = false;

		supplierRequestLotModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<SupplierRequestLot> toCacheModel() {
		SupplierRequestLotCacheModel supplierRequestLotCacheModel = new SupplierRequestLotCacheModel();

		supplierRequestLotCacheModel.supplier_request_lot_id = getSupplier_request_lot_id();

		supplierRequestLotCacheModel.organization_id = getOrganization_id();

		supplierRequestLotCacheModel.spisok_lotov_id = getSpisok_lotov_id();

		supplierRequestLotCacheModel.sub_application = getSub_application();

		supplierRequestLotCacheModel.withdrawn = getWithdrawn();

		return supplierRequestLotCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{supplier_request_lot_id=");
		sb.append(getSupplier_request_lot_id());
		sb.append(", organization_id=");
		sb.append(getOrganization_id());
		sb.append(", spisok_lotov_id=");
		sb.append(getSpisok_lotov_id());
		sb.append(", sub_application=");
		sb.append(getSub_application());
		sb.append(", withdrawn=");
		sb.append(getWithdrawn());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("tj.supplier.request.lot.model.SupplierRequestLot");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>supplier_request_lot_id</column-name><column-value><![CDATA[");
		sb.append(getSupplier_request_lot_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>organization_id</column-name><column-value><![CDATA[");
		sb.append(getOrganization_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>spisok_lotov_id</column-name><column-value><![CDATA[");
		sb.append(getSpisok_lotov_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sub_application</column-name><column-value><![CDATA[");
		sb.append(getSub_application());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>withdrawn</column-name><column-value><![CDATA[");
		sb.append(getWithdrawn());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = SupplierRequestLot.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			SupplierRequestLot.class
		};
	private long _supplier_request_lot_id;
	private long _organization_id;
	private long _originalOrganization_id;
	private boolean _setOriginalOrganization_id;
	private long _spisok_lotov_id;
	private long _originalSpisok_lotov_id;
	private boolean _setOriginalSpisok_lotov_id;
	private boolean _sub_application;
	private int _withdrawn;
	private long _columnBitmask;
	private SupplierRequestLot _escapedModel;
}