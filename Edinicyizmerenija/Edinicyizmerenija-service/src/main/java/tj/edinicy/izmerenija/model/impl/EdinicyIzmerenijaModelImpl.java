/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package tj.edinicy.izmerenija.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import tj.edinicy.izmerenija.model.EdinicyIzmerenija;
import tj.edinicy.izmerenija.model.EdinicyIzmerenijaModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the EdinicyIzmerenija service. Represents a row in the &quot;sapp.edinicy_izmerenija&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link EdinicyIzmerenijaModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EdinicyIzmerenijaImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see EdinicyIzmerenijaImpl
 * @see EdinicyIzmerenija
 * @see EdinicyIzmerenijaModel
 * @generated
 */
@ProviderType
public class EdinicyIzmerenijaModelImpl extends BaseModelImpl<EdinicyIzmerenija>
	implements EdinicyIzmerenijaModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a edinicy izmerenija model instance should use the {@link EdinicyIzmerenija} interface instead.
	 */
	public static final String TABLE_NAME = "sapp.edinicy_izmerenija";
	public static final Object[][] TABLE_COLUMNS = {
			{ "edinicy_izmerenija_id", Types.BIGINT },
			{ "nazvanie", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("edinicy_izmerenija_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("nazvanie", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table sapp.edinicy_izmerenija (edinicy_izmerenija_id LONG not null primary key,nazvanie VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table sapp.edinicy_izmerenija";
	public static final String ORDER_BY_JPQL = " ORDER BY edinicyIzmerenija.edinicy_izmerenija_id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY sapp.edinicy_izmerenija.edinicy_izmerenija_id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(tj.edinicy.izmerenija.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.tj.edinicy.izmerenija.model.EdinicyIzmerenija"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(tj.edinicy.izmerenija.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.tj.edinicy.izmerenija.model.EdinicyIzmerenija"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(tj.edinicy.izmerenija.service.util.ServiceProps.get(
				"lock.expiration.time.tj.edinicy.izmerenija.model.EdinicyIzmerenija"));

	public EdinicyIzmerenijaModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _edinicy_izmerenija_id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEdinicy_izmerenija_id(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _edinicy_izmerenija_id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return EdinicyIzmerenija.class;
	}

	@Override
	public String getModelClassName() {
		return EdinicyIzmerenija.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("edinicy_izmerenija_id", getEdinicy_izmerenija_id());
		attributes.put("nazvanie", getNazvanie());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long edinicy_izmerenija_id = (Long)attributes.get(
				"edinicy_izmerenija_id");

		if (edinicy_izmerenija_id != null) {
			setEdinicy_izmerenija_id(edinicy_izmerenija_id);
		}

		String nazvanie = (String)attributes.get("nazvanie");

		if (nazvanie != null) {
			setNazvanie(nazvanie);
		}
	}

	@Override
	public long getEdinicy_izmerenija_id() {
		return _edinicy_izmerenija_id;
	}

	@Override
	public void setEdinicy_izmerenija_id(long edinicy_izmerenija_id) {
		_edinicy_izmerenija_id = edinicy_izmerenija_id;
	}

	@Override
	public String getNazvanie() {
		if (_nazvanie == null) {
			return StringPool.BLANK;
		}
		else {
			return _nazvanie;
		}
	}

	@Override
	public void setNazvanie(String nazvanie) {
		_nazvanie = nazvanie;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			EdinicyIzmerenija.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public EdinicyIzmerenija toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (EdinicyIzmerenija)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EdinicyIzmerenijaImpl edinicyIzmerenijaImpl = new EdinicyIzmerenijaImpl();

		edinicyIzmerenijaImpl.setEdinicy_izmerenija_id(getEdinicy_izmerenija_id());
		edinicyIzmerenijaImpl.setNazvanie(getNazvanie());

		edinicyIzmerenijaImpl.resetOriginalValues();

		return edinicyIzmerenijaImpl;
	}

	@Override
	public int compareTo(EdinicyIzmerenija edinicyIzmerenija) {
		long primaryKey = edinicyIzmerenija.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof EdinicyIzmerenija)) {
			return false;
		}

		EdinicyIzmerenija edinicyIzmerenija = (EdinicyIzmerenija)obj;

		long primaryKey = edinicyIzmerenija.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<EdinicyIzmerenija> toCacheModel() {
		EdinicyIzmerenijaCacheModel edinicyIzmerenijaCacheModel = new EdinicyIzmerenijaCacheModel();

		edinicyIzmerenijaCacheModel.edinicy_izmerenija_id = getEdinicy_izmerenija_id();

		edinicyIzmerenijaCacheModel.nazvanie = getNazvanie();

		String nazvanie = edinicyIzmerenijaCacheModel.nazvanie;

		if ((nazvanie != null) && (nazvanie.length() == 0)) {
			edinicyIzmerenijaCacheModel.nazvanie = null;
		}

		return edinicyIzmerenijaCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{edinicy_izmerenija_id=");
		sb.append(getEdinicy_izmerenija_id());
		sb.append(", nazvanie=");
		sb.append(getNazvanie());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("tj.edinicy.izmerenija.model.EdinicyIzmerenija");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>edinicy_izmerenija_id</column-name><column-value><![CDATA[");
		sb.append(getEdinicy_izmerenija_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nazvanie</column-name><column-value><![CDATA[");
		sb.append(getNazvanie());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = EdinicyIzmerenija.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			EdinicyIzmerenija.class
		};
	private long _edinicy_izmerenija_id;
	private String _nazvanie;
	private EdinicyIzmerenija _escapedModel;
}