/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package tj.organization.other.info.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import tj.organization.other.info.model.OrgOtherInfo;
import tj.organization.other.info.model.OrgOtherInfoModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the OrgOtherInfo service. Represents a row in the &quot;sapp.org_otherinfo&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link OrgOtherInfoModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link OrgOtherInfoImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see OrgOtherInfoImpl
 * @see OrgOtherInfo
 * @see OrgOtherInfoModel
 * @generated
 */
@ProviderType
public class OrgOtherInfoModelImpl extends BaseModelImpl<OrgOtherInfo>
	implements OrgOtherInfoModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a org other info model instance should use the {@link OrgOtherInfo} interface instead.
	 */
	public static final String TABLE_NAME = "sapp.org_otherinfo";
	public static final Object[][] TABLE_COLUMNS = {
			{ "organization_id", Types.BIGINT },
			{ "mesto_registracii", Types.VARCHAR },
			{ "kratkoe_naimenovanie", Types.VARCHAR },
			{ "vbk_id", Types.BIGINT },
			{ "fbk_id", Types.BIGINT },
			{ "istochnik_finansirovanija_id", Types.INTEGER },
			{ "kvalificirovannaja_organizacija", Types.BOOLEAN },
			{ "data_gosudarstvennoj_registracii", Types.TIMESTAMP },
			{ "rajon_id", Types.BIGINT },
			{ "inn", Types.VARCHAR },
			{ "ein", Types.VARCHAR },
			{ "sin", Types.VARCHAR },
			{ "sozdal", Types.BIGINT },
			{ "data_sozdanija", Types.TIMESTAMP },
			{ "izmenil", Types.BIGINT },
			{ "data_izmenenija", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("organization_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("mesto_registracii", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("kratkoe_naimenovanie", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("vbk_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("fbk_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("istochnik_finansirovanija_id", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("kvalificirovannaja_organizacija", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("data_gosudarstvennoj_registracii",
			Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("rajon_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("inn", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ein", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sin", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sozdal", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("data_sozdanija", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("izmenil", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("data_izmenenija", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table sapp.org_otherinfo (organization_id LONG not null primary key,mesto_registracii VARCHAR(75) null,kratkoe_naimenovanie VARCHAR(75) null,vbk_id LONG,fbk_id LONG,istochnik_finansirovanija_id INTEGER,kvalificirovannaja_organizacija BOOLEAN,data_gosudarstvennoj_registracii DATE null,rajon_id LONG,inn VARCHAR(75) null,ein VARCHAR(75) null,sin VARCHAR(75) null,sozdal LONG,data_sozdanija DATE null,izmenil LONG,data_izmenenija DATE null)";
	public static final String TABLE_SQL_DROP = "drop table sapp.org_otherinfo";
	public static final String ORDER_BY_JPQL = " ORDER BY orgOtherInfo.organization_id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY sapp.org_otherinfo.organization_id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(tj.organization.other.info.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.tj.organization.other.info.model.OrgOtherInfo"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(tj.organization.other.info.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.tj.organization.other.info.model.OrgOtherInfo"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(tj.organization.other.info.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.tj.organization.other.info.model.OrgOtherInfo"),
			true);
	public static final long INN_COLUMN_BITMASK = 1L;
	public static final long ORGANIZATION_ID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(tj.organization.other.info.service.util.ServiceProps.get(
				"lock.expiration.time.tj.organization.other.info.model.OrgOtherInfo"));

	public OrgOtherInfoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _organization_id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setOrganization_id(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _organization_id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return OrgOtherInfo.class;
	}

	@Override
	public String getModelClassName() {
		return OrgOtherInfo.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("organization_id", getOrganization_id());
		attributes.put("mesto_registracii", getMesto_registracii());
		attributes.put("kratkoe_naimenovanie", getKratkoe_naimenovanie());
		attributes.put("vbk_id", getVbk_id());
		attributes.put("fbk_id", getFbk_id());
		attributes.put("istochnik_finansirovanija_id",
			getIstochnik_finansirovanija_id());
		attributes.put("kvalificirovannaja_organizacija",
			getKvalificirovannaja_organizacija());
		attributes.put("data_gosudarstvennoj_registracii",
			getData_gosudarstvennoj_registracii());
		attributes.put("rajon_id", getRajon_id());
		attributes.put("inn", getInn());
		attributes.put("ein", getEin());
		attributes.put("sin", getSin());
		attributes.put("sozdal", getSozdal());
		attributes.put("data_sozdanija", getData_sozdanija());
		attributes.put("izmenil", getIzmenil());
		attributes.put("data_izmenenija", getData_izmenenija());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long organization_id = (Long)attributes.get("organization_id");

		if (organization_id != null) {
			setOrganization_id(organization_id);
		}

		String mesto_registracii = (String)attributes.get("mesto_registracii");

		if (mesto_registracii != null) {
			setMesto_registracii(mesto_registracii);
		}

		String kratkoe_naimenovanie = (String)attributes.get(
				"kratkoe_naimenovanie");

		if (kratkoe_naimenovanie != null) {
			setKratkoe_naimenovanie(kratkoe_naimenovanie);
		}

		Long vbk_id = (Long)attributes.get("vbk_id");

		if (vbk_id != null) {
			setVbk_id(vbk_id);
		}

		Long fbk_id = (Long)attributes.get("fbk_id");

		if (fbk_id != null) {
			setFbk_id(fbk_id);
		}

		Integer istochnik_finansirovanija_id = (Integer)attributes.get(
				"istochnik_finansirovanija_id");

		if (istochnik_finansirovanija_id != null) {
			setIstochnik_finansirovanija_id(istochnik_finansirovanija_id);
		}

		Boolean kvalificirovannaja_organizacija = (Boolean)attributes.get(
				"kvalificirovannaja_organizacija");

		if (kvalificirovannaja_organizacija != null) {
			setKvalificirovannaja_organizacija(kvalificirovannaja_organizacija);
		}

		Date data_gosudarstvennoj_registracii = (Date)attributes.get(
				"data_gosudarstvennoj_registracii");

		if (data_gosudarstvennoj_registracii != null) {
			setData_gosudarstvennoj_registracii(data_gosudarstvennoj_registracii);
		}

		Long rajon_id = (Long)attributes.get("rajon_id");

		if (rajon_id != null) {
			setRajon_id(rajon_id);
		}

		String inn = (String)attributes.get("inn");

		if (inn != null) {
			setInn(inn);
		}

		String ein = (String)attributes.get("ein");

		if (ein != null) {
			setEin(ein);
		}

		String sin = (String)attributes.get("sin");

		if (sin != null) {
			setSin(sin);
		}

		Long sozdal = (Long)attributes.get("sozdal");

		if (sozdal != null) {
			setSozdal(sozdal);
		}

		Date data_sozdanija = (Date)attributes.get("data_sozdanija");

		if (data_sozdanija != null) {
			setData_sozdanija(data_sozdanija);
		}

		Long izmenil = (Long)attributes.get("izmenil");

		if (izmenil != null) {
			setIzmenil(izmenil);
		}

		Date data_izmenenija = (Date)attributes.get("data_izmenenija");

		if (data_izmenenija != null) {
			setData_izmenenija(data_izmenenija);
		}
	}

	@Override
	public long getOrganization_id() {
		return _organization_id;
	}

	@Override
	public void setOrganization_id(long organization_id) {
		_columnBitmask |= ORGANIZATION_ID_COLUMN_BITMASK;

		if (!_setOriginalOrganization_id) {
			_setOriginalOrganization_id = true;

			_originalOrganization_id = _organization_id;
		}

		_organization_id = organization_id;
	}

	public long getOriginalOrganization_id() {
		return _originalOrganization_id;
	}

	@Override
	public String getMesto_registracii() {
		if (_mesto_registracii == null) {
			return StringPool.BLANK;
		}
		else {
			return _mesto_registracii;
		}
	}

	@Override
	public void setMesto_registracii(String mesto_registracii) {
		_mesto_registracii = mesto_registracii;
	}

	@Override
	public String getKratkoe_naimenovanie() {
		if (_kratkoe_naimenovanie == null) {
			return StringPool.BLANK;
		}
		else {
			return _kratkoe_naimenovanie;
		}
	}

	@Override
	public void setKratkoe_naimenovanie(String kratkoe_naimenovanie) {
		_kratkoe_naimenovanie = kratkoe_naimenovanie;
	}

	@Override
	public long getVbk_id() {
		return _vbk_id;
	}

	@Override
	public void setVbk_id(long vbk_id) {
		_vbk_id = vbk_id;
	}

	@Override
	public long getFbk_id() {
		return _fbk_id;
	}

	@Override
	public void setFbk_id(long fbk_id) {
		_fbk_id = fbk_id;
	}

	@Override
	public int getIstochnik_finansirovanija_id() {
		return _istochnik_finansirovanija_id;
	}

	@Override
	public void setIstochnik_finansirovanija_id(
		int istochnik_finansirovanija_id) {
		_istochnik_finansirovanija_id = istochnik_finansirovanija_id;
	}

	@Override
	public boolean getKvalificirovannaja_organizacija() {
		return _kvalificirovannaja_organizacija;
	}

	@Override
	public boolean isKvalificirovannaja_organizacija() {
		return _kvalificirovannaja_organizacija;
	}

	@Override
	public void setKvalificirovannaja_organizacija(
		boolean kvalificirovannaja_organizacija) {
		_kvalificirovannaja_organizacija = kvalificirovannaja_organizacija;
	}

	@Override
	public Date getData_gosudarstvennoj_registracii() {
		return _data_gosudarstvennoj_registracii;
	}

	@Override
	public void setData_gosudarstvennoj_registracii(
		Date data_gosudarstvennoj_registracii) {
		_data_gosudarstvennoj_registracii = data_gosudarstvennoj_registracii;
	}

	@Override
	public long getRajon_id() {
		return _rajon_id;
	}

	@Override
	public void setRajon_id(long rajon_id) {
		_rajon_id = rajon_id;
	}

	@Override
	public String getInn() {
		if (_inn == null) {
			return StringPool.BLANK;
		}
		else {
			return _inn;
		}
	}

	@Override
	public void setInn(String inn) {
		_columnBitmask |= INN_COLUMN_BITMASK;

		if (_originalInn == null) {
			_originalInn = _inn;
		}

		_inn = inn;
	}

	public String getOriginalInn() {
		return GetterUtil.getString(_originalInn);
	}

	@Override
	public String getEin() {
		if (_ein == null) {
			return StringPool.BLANK;
		}
		else {
			return _ein;
		}
	}

	@Override
	public void setEin(String ein) {
		_ein = ein;
	}

	@Override
	public String getSin() {
		if (_sin == null) {
			return StringPool.BLANK;
		}
		else {
			return _sin;
		}
	}

	@Override
	public void setSin(String sin) {
		_sin = sin;
	}

	@Override
	public long getSozdal() {
		return _sozdal;
	}

	@Override
	public void setSozdal(long sozdal) {
		_sozdal = sozdal;
	}

	@Override
	public Date getData_sozdanija() {
		return _data_sozdanija;
	}

	@Override
	public void setData_sozdanija(Date data_sozdanija) {
		_data_sozdanija = data_sozdanija;
	}

	@Override
	public long getIzmenil() {
		return _izmenil;
	}

	@Override
	public void setIzmenil(long izmenil) {
		_izmenil = izmenil;
	}

	@Override
	public Date getData_izmenenija() {
		return _data_izmenenija;
	}

	@Override
	public void setData_izmenenija(Date data_izmenenija) {
		_data_izmenenija = data_izmenenija;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			OrgOtherInfo.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public OrgOtherInfo toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (OrgOtherInfo)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		OrgOtherInfoImpl orgOtherInfoImpl = new OrgOtherInfoImpl();

		orgOtherInfoImpl.setOrganization_id(getOrganization_id());
		orgOtherInfoImpl.setMesto_registracii(getMesto_registracii());
		orgOtherInfoImpl.setKratkoe_naimenovanie(getKratkoe_naimenovanie());
		orgOtherInfoImpl.setVbk_id(getVbk_id());
		orgOtherInfoImpl.setFbk_id(getFbk_id());
		orgOtherInfoImpl.setIstochnik_finansirovanija_id(getIstochnik_finansirovanija_id());
		orgOtherInfoImpl.setKvalificirovannaja_organizacija(getKvalificirovannaja_organizacija());
		orgOtherInfoImpl.setData_gosudarstvennoj_registracii(getData_gosudarstvennoj_registracii());
		orgOtherInfoImpl.setRajon_id(getRajon_id());
		orgOtherInfoImpl.setInn(getInn());
		orgOtherInfoImpl.setEin(getEin());
		orgOtherInfoImpl.setSin(getSin());
		orgOtherInfoImpl.setSozdal(getSozdal());
		orgOtherInfoImpl.setData_sozdanija(getData_sozdanija());
		orgOtherInfoImpl.setIzmenil(getIzmenil());
		orgOtherInfoImpl.setData_izmenenija(getData_izmenenija());

		orgOtherInfoImpl.resetOriginalValues();

		return orgOtherInfoImpl;
	}

	@Override
	public int compareTo(OrgOtherInfo orgOtherInfo) {
		long primaryKey = orgOtherInfo.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof OrgOtherInfo)) {
			return false;
		}

		OrgOtherInfo orgOtherInfo = (OrgOtherInfo)obj;

		long primaryKey = orgOtherInfo.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		OrgOtherInfoModelImpl orgOtherInfoModelImpl = this;

		orgOtherInfoModelImpl._originalOrganization_id = orgOtherInfoModelImpl._organization_id;

		orgOtherInfoModelImpl._setOriginalOrganization_id = false;

		orgOtherInfoModelImpl._originalInn = orgOtherInfoModelImpl._inn;

		orgOtherInfoModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<OrgOtherInfo> toCacheModel() {
		OrgOtherInfoCacheModel orgOtherInfoCacheModel = new OrgOtherInfoCacheModel();

		orgOtherInfoCacheModel.organization_id = getOrganization_id();

		orgOtherInfoCacheModel.mesto_registracii = getMesto_registracii();

		String mesto_registracii = orgOtherInfoCacheModel.mesto_registracii;

		if ((mesto_registracii != null) && (mesto_registracii.length() == 0)) {
			orgOtherInfoCacheModel.mesto_registracii = null;
		}

		orgOtherInfoCacheModel.kratkoe_naimenovanie = getKratkoe_naimenovanie();

		String kratkoe_naimenovanie = orgOtherInfoCacheModel.kratkoe_naimenovanie;

		if ((kratkoe_naimenovanie != null) &&
				(kratkoe_naimenovanie.length() == 0)) {
			orgOtherInfoCacheModel.kratkoe_naimenovanie = null;
		}

		orgOtherInfoCacheModel.vbk_id = getVbk_id();

		orgOtherInfoCacheModel.fbk_id = getFbk_id();

		orgOtherInfoCacheModel.istochnik_finansirovanija_id = getIstochnik_finansirovanija_id();

		orgOtherInfoCacheModel.kvalificirovannaja_organizacija = getKvalificirovannaja_organizacija();

		Date data_gosudarstvennoj_registracii = getData_gosudarstvennoj_registracii();

		if (data_gosudarstvennoj_registracii != null) {
			orgOtherInfoCacheModel.data_gosudarstvennoj_registracii = data_gosudarstvennoj_registracii.getTime();
		}
		else {
			orgOtherInfoCacheModel.data_gosudarstvennoj_registracii = Long.MIN_VALUE;
		}

		orgOtherInfoCacheModel.rajon_id = getRajon_id();

		orgOtherInfoCacheModel.inn = getInn();

		String inn = orgOtherInfoCacheModel.inn;

		if ((inn != null) && (inn.length() == 0)) {
			orgOtherInfoCacheModel.inn = null;
		}

		orgOtherInfoCacheModel.ein = getEin();

		String ein = orgOtherInfoCacheModel.ein;

		if ((ein != null) && (ein.length() == 0)) {
			orgOtherInfoCacheModel.ein = null;
		}

		orgOtherInfoCacheModel.sin = getSin();

		String sin = orgOtherInfoCacheModel.sin;

		if ((sin != null) && (sin.length() == 0)) {
			orgOtherInfoCacheModel.sin = null;
		}

		orgOtherInfoCacheModel.sozdal = getSozdal();

		Date data_sozdanija = getData_sozdanija();

		if (data_sozdanija != null) {
			orgOtherInfoCacheModel.data_sozdanija = data_sozdanija.getTime();
		}
		else {
			orgOtherInfoCacheModel.data_sozdanija = Long.MIN_VALUE;
		}

		orgOtherInfoCacheModel.izmenil = getIzmenil();

		Date data_izmenenija = getData_izmenenija();

		if (data_izmenenija != null) {
			orgOtherInfoCacheModel.data_izmenenija = data_izmenenija.getTime();
		}
		else {
			orgOtherInfoCacheModel.data_izmenenija = Long.MIN_VALUE;
		}

		return orgOtherInfoCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(33);

		sb.append("{organization_id=");
		sb.append(getOrganization_id());
		sb.append(", mesto_registracii=");
		sb.append(getMesto_registracii());
		sb.append(", kratkoe_naimenovanie=");
		sb.append(getKratkoe_naimenovanie());
		sb.append(", vbk_id=");
		sb.append(getVbk_id());
		sb.append(", fbk_id=");
		sb.append(getFbk_id());
		sb.append(", istochnik_finansirovanija_id=");
		sb.append(getIstochnik_finansirovanija_id());
		sb.append(", kvalificirovannaja_organizacija=");
		sb.append(getKvalificirovannaja_organizacija());
		sb.append(", data_gosudarstvennoj_registracii=");
		sb.append(getData_gosudarstvennoj_registracii());
		sb.append(", rajon_id=");
		sb.append(getRajon_id());
		sb.append(", inn=");
		sb.append(getInn());
		sb.append(", ein=");
		sb.append(getEin());
		sb.append(", sin=");
		sb.append(getSin());
		sb.append(", sozdal=");
		sb.append(getSozdal());
		sb.append(", data_sozdanija=");
		sb.append(getData_sozdanija());
		sb.append(", izmenil=");
		sb.append(getIzmenil());
		sb.append(", data_izmenenija=");
		sb.append(getData_izmenenija());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(52);

		sb.append("<model><model-name>");
		sb.append("tj.organization.other.info.model.OrgOtherInfo");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>organization_id</column-name><column-value><![CDATA[");
		sb.append(getOrganization_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mesto_registracii</column-name><column-value><![CDATA[");
		sb.append(getMesto_registracii());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>kratkoe_naimenovanie</column-name><column-value><![CDATA[");
		sb.append(getKratkoe_naimenovanie());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>vbk_id</column-name><column-value><![CDATA[");
		sb.append(getVbk_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fbk_id</column-name><column-value><![CDATA[");
		sb.append(getFbk_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>istochnik_finansirovanija_id</column-name><column-value><![CDATA[");
		sb.append(getIstochnik_finansirovanija_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>kvalificirovannaja_organizacija</column-name><column-value><![CDATA[");
		sb.append(getKvalificirovannaja_organizacija());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>data_gosudarstvennoj_registracii</column-name><column-value><![CDATA[");
		sb.append(getData_gosudarstvennoj_registracii());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rajon_id</column-name><column-value><![CDATA[");
		sb.append(getRajon_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inn</column-name><column-value><![CDATA[");
		sb.append(getInn());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ein</column-name><column-value><![CDATA[");
		sb.append(getEin());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sin</column-name><column-value><![CDATA[");
		sb.append(getSin());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sozdal</column-name><column-value><![CDATA[");
		sb.append(getSozdal());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>data_sozdanija</column-name><column-value><![CDATA[");
		sb.append(getData_sozdanija());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>izmenil</column-name><column-value><![CDATA[");
		sb.append(getIzmenil());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>data_izmenenija</column-name><column-value><![CDATA[");
		sb.append(getData_izmenenija());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = OrgOtherInfo.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			OrgOtherInfo.class
		};
	private long _organization_id;
	private long _originalOrganization_id;
	private boolean _setOriginalOrganization_id;
	private String _mesto_registracii;
	private String _kratkoe_naimenovanie;
	private long _vbk_id;
	private long _fbk_id;
	private int _istochnik_finansirovanija_id;
	private boolean _kvalificirovannaja_organizacija;
	private Date _data_gosudarstvennoj_registracii;
	private long _rajon_id;
	private String _inn;
	private String _originalInn;
	private String _ein;
	private String _sin;
	private long _sozdal;
	private Date _data_sozdanija;
	private long _izmenil;
	private Date _data_izmenenija;
	private long _columnBitmask;
	private OrgOtherInfo _escapedModel;
}