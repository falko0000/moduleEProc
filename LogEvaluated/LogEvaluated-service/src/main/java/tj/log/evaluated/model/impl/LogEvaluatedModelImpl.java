/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package tj.log.evaluated.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import tj.log.evaluated.model.LogEvaluated;
import tj.log.evaluated.model.LogEvaluatedModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the LogEvaluated service. Represents a row in the &quot;sapp.log_evaluated&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link LogEvaluatedModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LogEvaluatedImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see LogEvaluatedImpl
 * @see LogEvaluated
 * @see LogEvaluatedModel
 * @generated
 */
@ProviderType
public class LogEvaluatedModelImpl extends BaseModelImpl<LogEvaluated>
	implements LogEvaluatedModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a log evaluated model instance should use the {@link LogEvaluated} interface instead.
	 */
	public static final String TABLE_NAME = "sapp.log_evaluated";
	public static final Object[][] TABLE_COLUMNS = {
			{ "log_evaluated_id", Types.BIGINT },
			{ "spisok_lotov_id", Types.BIGINT },
			{ "organization_id", Types.BIGINT },
			{ "userid", Types.BIGINT },
			{ "status", Types.INTEGER },
			{ "evaluated_des", Types.VARCHAR },
			{ "opening_status", Types.INTEGER },
			{ "opening_des", Types.VARCHAR },
			{ "result_opening_id", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("log_evaluated_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("spisok_lotov_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("organization_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userid", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("evaluated_des", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("opening_status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("opening_des", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("result_opening_id", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table sapp.log_evaluated (log_evaluated_id LONG not null primary key,spisok_lotov_id LONG,organization_id LONG,userid LONG,status INTEGER,evaluated_des VARCHAR(75) null,opening_status INTEGER,opening_des VARCHAR(75) null,result_opening_id LONG)";
	public static final String TABLE_SQL_DROP = "drop table sapp.log_evaluated";
	public static final String ORDER_BY_JPQL = " ORDER BY logEvaluated.log_evaluated_id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY sapp.log_evaluated.log_evaluated_id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(tj.log.evaluated.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.tj.log.evaluated.model.LogEvaluated"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(tj.log.evaluated.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.tj.log.evaluated.model.LogEvaluated"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(tj.log.evaluated.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.tj.log.evaluated.model.LogEvaluated"),
			true);
	public static final long ORGANIZATION_ID_COLUMN_BITMASK = 1L;
	public static final long RESULT_OPENING_ID_COLUMN_BITMASK = 2L;
	public static final long SPISOK_LOTOV_ID_COLUMN_BITMASK = 4L;
	public static final long USERID_COLUMN_BITMASK = 8L;
	public static final long LOG_EVALUATED_ID_COLUMN_BITMASK = 16L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(tj.log.evaluated.service.util.ServiceProps.get(
				"lock.expiration.time.tj.log.evaluated.model.LogEvaluated"));

	public LogEvaluatedModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _log_evaluated_id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setLog_evaluated_id(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _log_evaluated_id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return LogEvaluated.class;
	}

	@Override
	public String getModelClassName() {
		return LogEvaluated.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("log_evaluated_id", getLog_evaluated_id());
		attributes.put("spisok_lotov_id", getSpisok_lotov_id());
		attributes.put("organization_id", getOrganization_id());
		attributes.put("userid", getUserid());
		attributes.put("status", getStatus());
		attributes.put("evaluated_des", getEvaluated_des());
		attributes.put("opening_status", getOpening_status());
		attributes.put("opening_des", getOpening_des());
		attributes.put("result_opening_id", getResult_opening_id());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long log_evaluated_id = (Long)attributes.get("log_evaluated_id");

		if (log_evaluated_id != null) {
			setLog_evaluated_id(log_evaluated_id);
		}

		Long spisok_lotov_id = (Long)attributes.get("spisok_lotov_id");

		if (spisok_lotov_id != null) {
			setSpisok_lotov_id(spisok_lotov_id);
		}

		Long organization_id = (Long)attributes.get("organization_id");

		if (organization_id != null) {
			setOrganization_id(organization_id);
		}

		Long userid = (Long)attributes.get("userid");

		if (userid != null) {
			setUserid(userid);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		String evaluated_des = (String)attributes.get("evaluated_des");

		if (evaluated_des != null) {
			setEvaluated_des(evaluated_des);
		}

		Integer opening_status = (Integer)attributes.get("opening_status");

		if (opening_status != null) {
			setOpening_status(opening_status);
		}

		String opening_des = (String)attributes.get("opening_des");

		if (opening_des != null) {
			setOpening_des(opening_des);
		}

		Long result_opening_id = (Long)attributes.get("result_opening_id");

		if (result_opening_id != null) {
			setResult_opening_id(result_opening_id);
		}
	}

	@Override
	public long getLog_evaluated_id() {
		return _log_evaluated_id;
	}

	@Override
	public void setLog_evaluated_id(long log_evaluated_id) {
		_log_evaluated_id = log_evaluated_id;
	}

	@Override
	public long getSpisok_lotov_id() {
		return _spisok_lotov_id;
	}

	@Override
	public void setSpisok_lotov_id(long spisok_lotov_id) {
		_columnBitmask |= SPISOK_LOTOV_ID_COLUMN_BITMASK;

		if (!_setOriginalSpisok_lotov_id) {
			_setOriginalSpisok_lotov_id = true;

			_originalSpisok_lotov_id = _spisok_lotov_id;
		}

		_spisok_lotov_id = spisok_lotov_id;
	}

	public long getOriginalSpisok_lotov_id() {
		return _originalSpisok_lotov_id;
	}

	@Override
	public long getOrganization_id() {
		return _organization_id;
	}

	@Override
	public void setOrganization_id(long organization_id) {
		_columnBitmask |= ORGANIZATION_ID_COLUMN_BITMASK;

		if (!_setOriginalOrganization_id) {
			_setOriginalOrganization_id = true;

			_originalOrganization_id = _organization_id;
		}

		_organization_id = organization_id;
	}

	public long getOriginalOrganization_id() {
		return _originalOrganization_id;
	}

	@Override
	public long getUserid() {
		return _userid;
	}

	@Override
	public void setUserid(long userid) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserid) {
			_setOriginalUserid = true;

			_originalUserid = _userid;
		}

		_userid = userid;
	}

	public long getOriginalUserid() {
		return _originalUserid;
	}

	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_status = status;
	}

	@Override
	public String getEvaluated_des() {
		if (_evaluated_des == null) {
			return StringPool.BLANK;
		}
		else {
			return _evaluated_des;
		}
	}

	@Override
	public void setEvaluated_des(String evaluated_des) {
		_evaluated_des = evaluated_des;
	}

	@Override
	public int getOpening_status() {
		return _opening_status;
	}

	@Override
	public void setOpening_status(int opening_status) {
		_opening_status = opening_status;
	}

	@Override
	public String getOpening_des() {
		if (_opening_des == null) {
			return StringPool.BLANK;
		}
		else {
			return _opening_des;
		}
	}

	@Override
	public void setOpening_des(String opening_des) {
		_opening_des = opening_des;
	}

	@Override
	public long getResult_opening_id() {
		return _result_opening_id;
	}

	@Override
	public void setResult_opening_id(long result_opening_id) {
		_columnBitmask |= RESULT_OPENING_ID_COLUMN_BITMASK;

		if (!_setOriginalResult_opening_id) {
			_setOriginalResult_opening_id = true;

			_originalResult_opening_id = _result_opening_id;
		}

		_result_opening_id = result_opening_id;
	}

	public long getOriginalResult_opening_id() {
		return _originalResult_opening_id;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			LogEvaluated.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public LogEvaluated toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (LogEvaluated)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LogEvaluatedImpl logEvaluatedImpl = new LogEvaluatedImpl();

		logEvaluatedImpl.setLog_evaluated_id(getLog_evaluated_id());
		logEvaluatedImpl.setSpisok_lotov_id(getSpisok_lotov_id());
		logEvaluatedImpl.setOrganization_id(getOrganization_id());
		logEvaluatedImpl.setUserid(getUserid());
		logEvaluatedImpl.setStatus(getStatus());
		logEvaluatedImpl.setEvaluated_des(getEvaluated_des());
		logEvaluatedImpl.setOpening_status(getOpening_status());
		logEvaluatedImpl.setOpening_des(getOpening_des());
		logEvaluatedImpl.setResult_opening_id(getResult_opening_id());

		logEvaluatedImpl.resetOriginalValues();

		return logEvaluatedImpl;
	}

	@Override
	public int compareTo(LogEvaluated logEvaluated) {
		long primaryKey = logEvaluated.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof LogEvaluated)) {
			return false;
		}

		LogEvaluated logEvaluated = (LogEvaluated)obj;

		long primaryKey = logEvaluated.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		LogEvaluatedModelImpl logEvaluatedModelImpl = this;

		logEvaluatedModelImpl._originalSpisok_lotov_id = logEvaluatedModelImpl._spisok_lotov_id;

		logEvaluatedModelImpl._setOriginalSpisok_lotov_id = false;

		logEvaluatedModelImpl._originalOrganization_id = logEvaluatedModelImpl._organization_id;

		logEvaluatedModelImpl._setOriginalOrganization_id = false;

		logEvaluatedModelImpl._originalUserid = logEvaluatedModelImpl._userid;

		logEvaluatedModelImpl._setOriginalUserid = false;

		logEvaluatedModelImpl._originalResult_opening_id = logEvaluatedModelImpl._result_opening_id;

		logEvaluatedModelImpl._setOriginalResult_opening_id = false;

		logEvaluatedModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<LogEvaluated> toCacheModel() {
		LogEvaluatedCacheModel logEvaluatedCacheModel = new LogEvaluatedCacheModel();

		logEvaluatedCacheModel.log_evaluated_id = getLog_evaluated_id();

		logEvaluatedCacheModel.spisok_lotov_id = getSpisok_lotov_id();

		logEvaluatedCacheModel.organization_id = getOrganization_id();

		logEvaluatedCacheModel.userid = getUserid();

		logEvaluatedCacheModel.status = getStatus();

		logEvaluatedCacheModel.evaluated_des = getEvaluated_des();

		String evaluated_des = logEvaluatedCacheModel.evaluated_des;

		if ((evaluated_des != null) && (evaluated_des.length() == 0)) {
			logEvaluatedCacheModel.evaluated_des = null;
		}

		logEvaluatedCacheModel.opening_status = getOpening_status();

		logEvaluatedCacheModel.opening_des = getOpening_des();

		String opening_des = logEvaluatedCacheModel.opening_des;

		if ((opening_des != null) && (opening_des.length() == 0)) {
			logEvaluatedCacheModel.opening_des = null;
		}

		logEvaluatedCacheModel.result_opening_id = getResult_opening_id();

		return logEvaluatedCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(19);

		sb.append("{log_evaluated_id=");
		sb.append(getLog_evaluated_id());
		sb.append(", spisok_lotov_id=");
		sb.append(getSpisok_lotov_id());
		sb.append(", organization_id=");
		sb.append(getOrganization_id());
		sb.append(", userid=");
		sb.append(getUserid());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", evaluated_des=");
		sb.append(getEvaluated_des());
		sb.append(", opening_status=");
		sb.append(getOpening_status());
		sb.append(", opening_des=");
		sb.append(getOpening_des());
		sb.append(", result_opening_id=");
		sb.append(getResult_opening_id());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(31);

		sb.append("<model><model-name>");
		sb.append("tj.log.evaluated.model.LogEvaluated");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>log_evaluated_id</column-name><column-value><![CDATA[");
		sb.append(getLog_evaluated_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>spisok_lotov_id</column-name><column-value><![CDATA[");
		sb.append(getSpisok_lotov_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>organization_id</column-name><column-value><![CDATA[");
		sb.append(getOrganization_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userid</column-name><column-value><![CDATA[");
		sb.append(getUserid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>evaluated_des</column-name><column-value><![CDATA[");
		sb.append(getEvaluated_des());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>opening_status</column-name><column-value><![CDATA[");
		sb.append(getOpening_status());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>opening_des</column-name><column-value><![CDATA[");
		sb.append(getOpening_des());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>result_opening_id</column-name><column-value><![CDATA[");
		sb.append(getResult_opening_id());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = LogEvaluated.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			LogEvaluated.class
		};
	private long _log_evaluated_id;
	private long _spisok_lotov_id;
	private long _originalSpisok_lotov_id;
	private boolean _setOriginalSpisok_lotov_id;
	private long _organization_id;
	private long _originalOrganization_id;
	private boolean _setOriginalOrganization_id;
	private long _userid;
	private long _originalUserid;
	private boolean _setOriginalUserid;
	private int _status;
	private String _evaluated_des;
	private int _opening_status;
	private String _opening_des;
	private long _result_opening_id;
	private long _originalResult_opening_id;
	private boolean _setOriginalResult_opening_id;
	private long _columnBitmask;
	private LogEvaluated _escapedModel;
}