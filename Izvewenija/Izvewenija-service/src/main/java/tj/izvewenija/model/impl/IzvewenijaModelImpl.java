/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package tj.izvewenija.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import tj.izvewenija.model.Izvewenija;
import tj.izvewenija.model.IzvewenijaModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Izvewenija service. Represents a row in the &quot;sapp.izvewenija&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link IzvewenijaModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link IzvewenijaImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see IzvewenijaImpl
 * @see Izvewenija
 * @see IzvewenijaModel
 * @generated
 */
@ProviderType
public class IzvewenijaModelImpl extends BaseModelImpl<Izvewenija>
	implements IzvewenijaModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a izvewenija model instance should use the {@link Izvewenija} interface instead.
	 */
	public static final String TABLE_NAME = "sapp.izvewenija";
	public static final Object[][] TABLE_COLUMNS = {
			{ "data_izmenenija", Types.TIMESTAMP },
			{ "data_sozdanija", Types.TIMESTAMP },
			{ "izmenil", Types.BIGINT },
			{ "izvewenija_id", Types.BIGINT },
			{ "kod_id", Types.BIGINT },
			{ "naimenovanie", Types.VARCHAR },
			{ "organizacija_id", Types.BIGINT },
			{ "sostojanie_id", Types.BIGINT },
			{ "sozdal", Types.BIGINT },
			{ "status_id", Types.BIGINT },
			{ "tip_izvewenija_id", Types.BIGINT },
			{ "vyshestojawaja_organizacija_id", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("data_izmenenija", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("data_sozdanija", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("izmenil", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("izvewenija_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("kod_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("naimenovanie", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("organizacija_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("sostojanie_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("sozdal", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("status_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("tip_izvewenija_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("vyshestojawaja_organizacija_id", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table sapp.izvewenija (data_izmenenija DATE null,data_sozdanija DATE null,izmenil LONG,izvewenija_id LONG not null primary key,kod_id LONG,naimenovanie VARCHAR(75) null,organizacija_id LONG,sostojanie_id LONG,sozdal LONG,status_id LONG,tip_izvewenija_id LONG,vyshestojawaja_organizacija_id LONG)";
	public static final String TABLE_SQL_DROP = "drop table sapp.izvewenija";
	public static final String ORDER_BY_JPQL = " ORDER BY izvewenija.izvewenija_id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY sapp.izvewenija.izvewenija_id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(tj.izvewenija.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.tj.izvewenija.model.Izvewenija"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(tj.izvewenija.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.tj.izvewenija.model.Izvewenija"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(tj.izvewenija.service.util.ServiceProps.get(
				"lock.expiration.time.tj.izvewenija.model.Izvewenija"));

	public IzvewenijaModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _izvewenija_id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setIzvewenija_id(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _izvewenija_id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Izvewenija.class;
	}

	@Override
	public String getModelClassName() {
		return Izvewenija.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("data_izmenenija", getData_izmenenija());
		attributes.put("data_sozdanija", getData_sozdanija());
		attributes.put("izmenil", getIzmenil());
		attributes.put("izvewenija_id", getIzvewenija_id());
		attributes.put("kod_id", getKod_id());
		attributes.put("naimenovanie", getNaimenovanie());
		attributes.put("organizacija_id", getOrganizacija_id());
		attributes.put("sostojanie_id", getSostojanie_id());
		attributes.put("sozdal", getSozdal());
		attributes.put("status_id", getStatus_id());
		attributes.put("tip_izvewenija_id", getTip_izvewenija_id());
		attributes.put("vyshestojawaja_organizacija_id",
			getVyshestojawaja_organizacija_id());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Date data_izmenenija = (Date)attributes.get("data_izmenenija");

		if (data_izmenenija != null) {
			setData_izmenenija(data_izmenenija);
		}

		Date data_sozdanija = (Date)attributes.get("data_sozdanija");

		if (data_sozdanija != null) {
			setData_sozdanija(data_sozdanija);
		}

		Long izmenil = (Long)attributes.get("izmenil");

		if (izmenil != null) {
			setIzmenil(izmenil);
		}

		Long izvewenija_id = (Long)attributes.get("izvewenija_id");

		if (izvewenija_id != null) {
			setIzvewenija_id(izvewenija_id);
		}

		Long kod_id = (Long)attributes.get("kod_id");

		if (kod_id != null) {
			setKod_id(kod_id);
		}

		String naimenovanie = (String)attributes.get("naimenovanie");

		if (naimenovanie != null) {
			setNaimenovanie(naimenovanie);
		}

		Long organizacija_id = (Long)attributes.get("organizacija_id");

		if (organizacija_id != null) {
			setOrganizacija_id(organizacija_id);
		}

		Long sostojanie_id = (Long)attributes.get("sostojanie_id");

		if (sostojanie_id != null) {
			setSostojanie_id(sostojanie_id);
		}

		Long sozdal = (Long)attributes.get("sozdal");

		if (sozdal != null) {
			setSozdal(sozdal);
		}

		Long status_id = (Long)attributes.get("status_id");

		if (status_id != null) {
			setStatus_id(status_id);
		}

		Long tip_izvewenija_id = (Long)attributes.get("tip_izvewenija_id");

		if (tip_izvewenija_id != null) {
			setTip_izvewenija_id(tip_izvewenija_id);
		}

		Long vyshestojawaja_organizacija_id = (Long)attributes.get(
				"vyshestojawaja_organizacija_id");

		if (vyshestojawaja_organizacija_id != null) {
			setVyshestojawaja_organizacija_id(vyshestojawaja_organizacija_id);
		}
	}

	@Override
	public Date getData_izmenenija() {
		return _data_izmenenija;
	}

	@Override
	public void setData_izmenenija(Date data_izmenenija) {
		_data_izmenenija = data_izmenenija;
	}

	@Override
	public Date getData_sozdanija() {
		return _data_sozdanija;
	}

	@Override
	public void setData_sozdanija(Date data_sozdanija) {
		_data_sozdanija = data_sozdanija;
	}

	@Override
	public long getIzmenil() {
		return _izmenil;
	}

	@Override
	public void setIzmenil(long izmenil) {
		_izmenil = izmenil;
	}

	@Override
	public long getIzvewenija_id() {
		return _izvewenija_id;
	}

	@Override
	public void setIzvewenija_id(long izvewenija_id) {
		_izvewenija_id = izvewenija_id;
	}

	@Override
	public long getKod_id() {
		return _kod_id;
	}

	@Override
	public void setKod_id(long kod_id) {
		_kod_id = kod_id;
	}

	@Override
	public String getNaimenovanie() {
		if (_naimenovanie == null) {
			return StringPool.BLANK;
		}
		else {
			return _naimenovanie;
		}
	}

	@Override
	public void setNaimenovanie(String naimenovanie) {
		_naimenovanie = naimenovanie;
	}

	@Override
	public long getOrganizacija_id() {
		return _organizacija_id;
	}

	@Override
	public void setOrganizacija_id(long organizacija_id) {
		_organizacija_id = organizacija_id;
	}

	@Override
	public long getSostojanie_id() {
		return _sostojanie_id;
	}

	@Override
	public void setSostojanie_id(long sostojanie_id) {
		_sostojanie_id = sostojanie_id;
	}

	@Override
	public long getSozdal() {
		return _sozdal;
	}

	@Override
	public void setSozdal(long sozdal) {
		_sozdal = sozdal;
	}

	@Override
	public long getStatus_id() {
		return _status_id;
	}

	@Override
	public void setStatus_id(long status_id) {
		_status_id = status_id;
	}

	@Override
	public long getTip_izvewenija_id() {
		return _tip_izvewenija_id;
	}

	@Override
	public void setTip_izvewenija_id(long tip_izvewenija_id) {
		_tip_izvewenija_id = tip_izvewenija_id;
	}

	@Override
	public long getVyshestojawaja_organizacija_id() {
		return _vyshestojawaja_organizacija_id;
	}

	@Override
	public void setVyshestojawaja_organizacija_id(
		long vyshestojawaja_organizacija_id) {
		_vyshestojawaja_organizacija_id = vyshestojawaja_organizacija_id;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Izvewenija.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Izvewenija toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Izvewenija)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		IzvewenijaImpl izvewenijaImpl = new IzvewenijaImpl();

		izvewenijaImpl.setData_izmenenija(getData_izmenenija());
		izvewenijaImpl.setData_sozdanija(getData_sozdanija());
		izvewenijaImpl.setIzmenil(getIzmenil());
		izvewenijaImpl.setIzvewenija_id(getIzvewenija_id());
		izvewenijaImpl.setKod_id(getKod_id());
		izvewenijaImpl.setNaimenovanie(getNaimenovanie());
		izvewenijaImpl.setOrganizacija_id(getOrganizacija_id());
		izvewenijaImpl.setSostojanie_id(getSostojanie_id());
		izvewenijaImpl.setSozdal(getSozdal());
		izvewenijaImpl.setStatus_id(getStatus_id());
		izvewenijaImpl.setTip_izvewenija_id(getTip_izvewenija_id());
		izvewenijaImpl.setVyshestojawaja_organizacija_id(getVyshestojawaja_organizacija_id());

		izvewenijaImpl.resetOriginalValues();

		return izvewenijaImpl;
	}

	@Override
	public int compareTo(Izvewenija izvewenija) {
		long primaryKey = izvewenija.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Izvewenija)) {
			return false;
		}

		Izvewenija izvewenija = (Izvewenija)obj;

		long primaryKey = izvewenija.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Izvewenija> toCacheModel() {
		IzvewenijaCacheModel izvewenijaCacheModel = new IzvewenijaCacheModel();

		Date data_izmenenija = getData_izmenenija();

		if (data_izmenenija != null) {
			izvewenijaCacheModel.data_izmenenija = data_izmenenija.getTime();
		}
		else {
			izvewenijaCacheModel.data_izmenenija = Long.MIN_VALUE;
		}

		Date data_sozdanija = getData_sozdanija();

		if (data_sozdanija != null) {
			izvewenijaCacheModel.data_sozdanija = data_sozdanija.getTime();
		}
		else {
			izvewenijaCacheModel.data_sozdanija = Long.MIN_VALUE;
		}

		izvewenijaCacheModel.izmenil = getIzmenil();

		izvewenijaCacheModel.izvewenija_id = getIzvewenija_id();

		izvewenijaCacheModel.kod_id = getKod_id();

		izvewenijaCacheModel.naimenovanie = getNaimenovanie();

		String naimenovanie = izvewenijaCacheModel.naimenovanie;

		if ((naimenovanie != null) && (naimenovanie.length() == 0)) {
			izvewenijaCacheModel.naimenovanie = null;
		}

		izvewenijaCacheModel.organizacija_id = getOrganizacija_id();

		izvewenijaCacheModel.sostojanie_id = getSostojanie_id();

		izvewenijaCacheModel.sozdal = getSozdal();

		izvewenijaCacheModel.status_id = getStatus_id();

		izvewenijaCacheModel.tip_izvewenija_id = getTip_izvewenija_id();

		izvewenijaCacheModel.vyshestojawaja_organizacija_id = getVyshestojawaja_organizacija_id();

		return izvewenijaCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{data_izmenenija=");
		sb.append(getData_izmenenija());
		sb.append(", data_sozdanija=");
		sb.append(getData_sozdanija());
		sb.append(", izmenil=");
		sb.append(getIzmenil());
		sb.append(", izvewenija_id=");
		sb.append(getIzvewenija_id());
		sb.append(", kod_id=");
		sb.append(getKod_id());
		sb.append(", naimenovanie=");
		sb.append(getNaimenovanie());
		sb.append(", organizacija_id=");
		sb.append(getOrganizacija_id());
		sb.append(", sostojanie_id=");
		sb.append(getSostojanie_id());
		sb.append(", sozdal=");
		sb.append(getSozdal());
		sb.append(", status_id=");
		sb.append(getStatus_id());
		sb.append(", tip_izvewenija_id=");
		sb.append(getTip_izvewenija_id());
		sb.append(", vyshestojawaja_organizacija_id=");
		sb.append(getVyshestojawaja_organizacija_id());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("tj.izvewenija.model.Izvewenija");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>data_izmenenija</column-name><column-value><![CDATA[");
		sb.append(getData_izmenenija());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>data_sozdanija</column-name><column-value><![CDATA[");
		sb.append(getData_sozdanija());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>izmenil</column-name><column-value><![CDATA[");
		sb.append(getIzmenil());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>izvewenija_id</column-name><column-value><![CDATA[");
		sb.append(getIzvewenija_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>kod_id</column-name><column-value><![CDATA[");
		sb.append(getKod_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>naimenovanie</column-name><column-value><![CDATA[");
		sb.append(getNaimenovanie());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>organizacija_id</column-name><column-value><![CDATA[");
		sb.append(getOrganizacija_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sostojanie_id</column-name><column-value><![CDATA[");
		sb.append(getSostojanie_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sozdal</column-name><column-value><![CDATA[");
		sb.append(getSozdal());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status_id</column-name><column-value><![CDATA[");
		sb.append(getStatus_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tip_izvewenija_id</column-name><column-value><![CDATA[");
		sb.append(getTip_izvewenija_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>vyshestojawaja_organizacija_id</column-name><column-value><![CDATA[");
		sb.append(getVyshestojawaja_organizacija_id());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Izvewenija.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Izvewenija.class
		};
	private Date _data_izmenenija;
	private Date _data_sozdanija;
	private long _izmenil;
	private long _izvewenija_id;
	private long _kod_id;
	private String _naimenovanie;
	private long _organizacija_id;
	private long _sostojanie_id;
	private long _sozdal;
	private long _status_id;
	private long _tip_izvewenija_id;
	private long _vyshestojawaja_organizacija_id;
	private Izvewenija _escapedModel;
}