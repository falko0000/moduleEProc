/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package tj.criterias.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import tj.criterias.model.CriteriaTemplate;
import tj.criterias.model.CriteriaTemplateModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the CriteriaTemplate service. Represents a row in the &quot;sapp.criteria_template&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link CriteriaTemplateModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CriteriaTemplateImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CriteriaTemplateImpl
 * @see CriteriaTemplate
 * @see CriteriaTemplateModel
 * @generated
 */
@ProviderType
public class CriteriaTemplateModelImpl extends BaseModelImpl<CriteriaTemplate>
	implements CriteriaTemplateModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a criteria template model instance should use the {@link CriteriaTemplate} interface instead.
	 */
	public static final String TABLE_NAME = "sapp.criteria_template";
	public static final Object[][] TABLE_COLUMNS = {
			{ "criteria_template_id", Types.BIGINT },
			{ "criteria_name", Types.VARCHAR },
			{ "criteria_category_id", Types.INTEGER },
			{ "created", Types.TIMESTAMP },
			{ "updated", Types.TIMESTAMP },
			{ "createdby", Types.BIGINT },
			{ "updatedby", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("criteria_template_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("criteria_name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("criteria_category_id", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("created", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("updated", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("createdby", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("updatedby", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table sapp.criteria_template (criteria_template_id LONG not null primary key,criteria_name VARCHAR(75) null,criteria_category_id INTEGER,created DATE null,updated DATE null,createdby LONG,updatedby LONG)";
	public static final String TABLE_SQL_DROP = "drop table sapp.criteria_template";
	public static final String ORDER_BY_JPQL = " ORDER BY criteriaTemplate.criteria_template_id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY sapp.criteria_template.criteria_template_id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(tj.criterias.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.tj.criterias.model.CriteriaTemplate"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(tj.criterias.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.tj.criterias.model.CriteriaTemplate"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(tj.criterias.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.tj.criterias.model.CriteriaTemplate"),
			true);
	public static final long CRITERIA_CATEGORY_ID_COLUMN_BITMASK = 1L;
	public static final long CRITERIA_TEMPLATE_ID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(tj.criterias.service.util.ServiceProps.get(
				"lock.expiration.time.tj.criterias.model.CriteriaTemplate"));

	public CriteriaTemplateModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _criteria_template_id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCriteria_template_id(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _criteria_template_id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CriteriaTemplate.class;
	}

	@Override
	public String getModelClassName() {
		return CriteriaTemplate.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("criteria_template_id", getCriteria_template_id());
		attributes.put("criteria_name", getCriteria_name());
		attributes.put("criteria_category_id", getCriteria_category_id());
		attributes.put("created", getCreated());
		attributes.put("updated", getUpdated());
		attributes.put("createdby", getCreatedby());
		attributes.put("updatedby", getUpdatedby());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long criteria_template_id = (Long)attributes.get("criteria_template_id");

		if (criteria_template_id != null) {
			setCriteria_template_id(criteria_template_id);
		}

		String criteria_name = (String)attributes.get("criteria_name");

		if (criteria_name != null) {
			setCriteria_name(criteria_name);
		}

		Integer criteria_category_id = (Integer)attributes.get(
				"criteria_category_id");

		if (criteria_category_id != null) {
			setCriteria_category_id(criteria_category_id);
		}

		Date created = (Date)attributes.get("created");

		if (created != null) {
			setCreated(created);
		}

		Date updated = (Date)attributes.get("updated");

		if (updated != null) {
			setUpdated(updated);
		}

		Long createdby = (Long)attributes.get("createdby");

		if (createdby != null) {
			setCreatedby(createdby);
		}

		Long updatedby = (Long)attributes.get("updatedby");

		if (updatedby != null) {
			setUpdatedby(updatedby);
		}
	}

	@Override
	public long getCriteria_template_id() {
		return _criteria_template_id;
	}

	@Override
	public void setCriteria_template_id(long criteria_template_id) {
		_criteria_template_id = criteria_template_id;
	}

	@Override
	public String getCriteria_name() {
		if (_criteria_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _criteria_name;
		}
	}

	@Override
	public void setCriteria_name(String criteria_name) {
		_criteria_name = criteria_name;
	}

	@Override
	public int getCriteria_category_id() {
		return _criteria_category_id;
	}

	@Override
	public void setCriteria_category_id(int criteria_category_id) {
		_columnBitmask |= CRITERIA_CATEGORY_ID_COLUMN_BITMASK;

		if (!_setOriginalCriteria_category_id) {
			_setOriginalCriteria_category_id = true;

			_originalCriteria_category_id = _criteria_category_id;
		}

		_criteria_category_id = criteria_category_id;
	}

	public int getOriginalCriteria_category_id() {
		return _originalCriteria_category_id;
	}

	@Override
	public Date getCreated() {
		return _created;
	}

	@Override
	public void setCreated(Date created) {
		_created = created;
	}

	@Override
	public Date getUpdated() {
		return _updated;
	}

	@Override
	public void setUpdated(Date updated) {
		_updated = updated;
	}

	@Override
	public long getCreatedby() {
		return _createdby;
	}

	@Override
	public void setCreatedby(long createdby) {
		_createdby = createdby;
	}

	@Override
	public long getUpdatedby() {
		return _updatedby;
	}

	@Override
	public void setUpdatedby(long updatedby) {
		_updatedby = updatedby;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			CriteriaTemplate.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CriteriaTemplate toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (CriteriaTemplate)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CriteriaTemplateImpl criteriaTemplateImpl = new CriteriaTemplateImpl();

		criteriaTemplateImpl.setCriteria_template_id(getCriteria_template_id());
		criteriaTemplateImpl.setCriteria_name(getCriteria_name());
		criteriaTemplateImpl.setCriteria_category_id(getCriteria_category_id());
		criteriaTemplateImpl.setCreated(getCreated());
		criteriaTemplateImpl.setUpdated(getUpdated());
		criteriaTemplateImpl.setCreatedby(getCreatedby());
		criteriaTemplateImpl.setUpdatedby(getUpdatedby());

		criteriaTemplateImpl.resetOriginalValues();

		return criteriaTemplateImpl;
	}

	@Override
	public int compareTo(CriteriaTemplate criteriaTemplate) {
		long primaryKey = criteriaTemplate.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof CriteriaTemplate)) {
			return false;
		}

		CriteriaTemplate criteriaTemplate = (CriteriaTemplate)obj;

		long primaryKey = criteriaTemplate.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		CriteriaTemplateModelImpl criteriaTemplateModelImpl = this;

		criteriaTemplateModelImpl._originalCriteria_category_id = criteriaTemplateModelImpl._criteria_category_id;

		criteriaTemplateModelImpl._setOriginalCriteria_category_id = false;

		criteriaTemplateModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<CriteriaTemplate> toCacheModel() {
		CriteriaTemplateCacheModel criteriaTemplateCacheModel = new CriteriaTemplateCacheModel();

		criteriaTemplateCacheModel.criteria_template_id = getCriteria_template_id();

		criteriaTemplateCacheModel.criteria_name = getCriteria_name();

		String criteria_name = criteriaTemplateCacheModel.criteria_name;

		if ((criteria_name != null) && (criteria_name.length() == 0)) {
			criteriaTemplateCacheModel.criteria_name = null;
		}

		criteriaTemplateCacheModel.criteria_category_id = getCriteria_category_id();

		Date created = getCreated();

		if (created != null) {
			criteriaTemplateCacheModel.created = created.getTime();
		}
		else {
			criteriaTemplateCacheModel.created = Long.MIN_VALUE;
		}

		Date updated = getUpdated();

		if (updated != null) {
			criteriaTemplateCacheModel.updated = updated.getTime();
		}
		else {
			criteriaTemplateCacheModel.updated = Long.MIN_VALUE;
		}

		criteriaTemplateCacheModel.createdby = getCreatedby();

		criteriaTemplateCacheModel.updatedby = getUpdatedby();

		return criteriaTemplateCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{criteria_template_id=");
		sb.append(getCriteria_template_id());
		sb.append(", criteria_name=");
		sb.append(getCriteria_name());
		sb.append(", criteria_category_id=");
		sb.append(getCriteria_category_id());
		sb.append(", created=");
		sb.append(getCreated());
		sb.append(", updated=");
		sb.append(getUpdated());
		sb.append(", createdby=");
		sb.append(getCreatedby());
		sb.append(", updatedby=");
		sb.append(getUpdatedby());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("tj.criterias.model.CriteriaTemplate");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>criteria_template_id</column-name><column-value><![CDATA[");
		sb.append(getCriteria_template_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>criteria_name</column-name><column-value><![CDATA[");
		sb.append(getCriteria_name());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>criteria_category_id</column-name><column-value><![CDATA[");
		sb.append(getCriteria_category_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>created</column-name><column-value><![CDATA[");
		sb.append(getCreated());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updated</column-name><column-value><![CDATA[");
		sb.append(getUpdated());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdby</column-name><column-value><![CDATA[");
		sb.append(getCreatedby());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedby</column-name><column-value><![CDATA[");
		sb.append(getUpdatedby());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = CriteriaTemplate.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			CriteriaTemplate.class
		};
	private long _criteria_template_id;
	private String _criteria_name;
	private int _criteria_category_id;
	private int _originalCriteria_category_id;
	private boolean _setOriginalCriteria_category_id;
	private Date _created;
	private Date _updated;
	private long _createdby;
	private long _updatedby;
	private long _columnBitmask;
	private CriteriaTemplate _escapedModel;
}