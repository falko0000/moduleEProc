/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package tj.criterias.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import tj.criterias.model.CriteriasWeight;
import tj.criterias.model.CriteriasWeightModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the CriteriasWeight service. Represents a row in the &quot;sapp.criterias_weight&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link CriteriasWeightModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CriteriasWeightImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CriteriasWeightImpl
 * @see CriteriasWeight
 * @see CriteriasWeightModel
 * @generated
 */
@ProviderType
public class CriteriasWeightModelImpl extends BaseModelImpl<CriteriasWeight>
	implements CriteriasWeightModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a criterias weight model instance should use the {@link CriteriasWeight} interface instead.
	 */
	public static final String TABLE_NAME = "sapp.criterias_weight";
	public static final Object[][] TABLE_COLUMNS = {
			{ "criterias_weight_id", Types.BIGINT },
			{ "spisok_lotov_id", Types.BIGINT },
			{ "criteria_category_id", Types.INTEGER },
			{ "criterias_weight", Types.DOUBLE },
			{ "created", Types.TIMESTAMP },
			{ "updated", Types.TIMESTAMP },
			{ "createdby", Types.BIGINT },
			{ "updatedby", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("criterias_weight_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("spisok_lotov_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("criteria_category_id", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("criterias_weight", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("created", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("updated", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("createdby", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("updatedby", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table sapp.criterias_weight (criterias_weight_id LONG not null primary key,spisok_lotov_id LONG,criteria_category_id INTEGER,criterias_weight DOUBLE,created DATE null,updated DATE null,createdby LONG,updatedby LONG)";
	public static final String TABLE_SQL_DROP = "drop table sapp.criterias_weight";
	public static final String ORDER_BY_JPQL = " ORDER BY criteriasWeight.criterias_weight_id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY sapp.criterias_weight.criterias_weight_id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(tj.criterias.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.tj.criterias.model.CriteriasWeight"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(tj.criterias.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.tj.criterias.model.CriteriasWeight"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(tj.criterias.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.tj.criterias.model.CriteriasWeight"),
			true);
	public static final long CRITERIA_CATEGORY_ID_COLUMN_BITMASK = 1L;
	public static final long SPISOK_LOTOV_ID_COLUMN_BITMASK = 2L;
	public static final long CRITERIAS_WEIGHT_ID_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(tj.criterias.service.util.ServiceProps.get(
				"lock.expiration.time.tj.criterias.model.CriteriasWeight"));

	public CriteriasWeightModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _criterias_weight_id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCriterias_weight_id(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _criterias_weight_id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CriteriasWeight.class;
	}

	@Override
	public String getModelClassName() {
		return CriteriasWeight.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("criterias_weight_id", getCriterias_weight_id());
		attributes.put("spisok_lotov_id", getSpisok_lotov_id());
		attributes.put("criteria_category_id", getCriteria_category_id());
		attributes.put("criterias_weight", getCriterias_weight());
		attributes.put("created", getCreated());
		attributes.put("updated", getUpdated());
		attributes.put("createdby", getCreatedby());
		attributes.put("updatedby", getUpdatedby());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long criterias_weight_id = (Long)attributes.get("criterias_weight_id");

		if (criterias_weight_id != null) {
			setCriterias_weight_id(criterias_weight_id);
		}

		Long spisok_lotov_id = (Long)attributes.get("spisok_lotov_id");

		if (spisok_lotov_id != null) {
			setSpisok_lotov_id(spisok_lotov_id);
		}

		Integer criteria_category_id = (Integer)attributes.get(
				"criteria_category_id");

		if (criteria_category_id != null) {
			setCriteria_category_id(criteria_category_id);
		}

		Double criterias_weight = (Double)attributes.get("criterias_weight");

		if (criterias_weight != null) {
			setCriterias_weight(criterias_weight);
		}

		Date created = (Date)attributes.get("created");

		if (created != null) {
			setCreated(created);
		}

		Date updated = (Date)attributes.get("updated");

		if (updated != null) {
			setUpdated(updated);
		}

		Long createdby = (Long)attributes.get("createdby");

		if (createdby != null) {
			setCreatedby(createdby);
		}

		Long updatedby = (Long)attributes.get("updatedby");

		if (updatedby != null) {
			setUpdatedby(updatedby);
		}
	}

	@Override
	public long getCriterias_weight_id() {
		return _criterias_weight_id;
	}

	@Override
	public void setCriterias_weight_id(long criterias_weight_id) {
		_criterias_weight_id = criterias_weight_id;
	}

	@Override
	public long getSpisok_lotov_id() {
		return _spisok_lotov_id;
	}

	@Override
	public void setSpisok_lotov_id(long spisok_lotov_id) {
		_columnBitmask |= SPISOK_LOTOV_ID_COLUMN_BITMASK;

		if (!_setOriginalSpisok_lotov_id) {
			_setOriginalSpisok_lotov_id = true;

			_originalSpisok_lotov_id = _spisok_lotov_id;
		}

		_spisok_lotov_id = spisok_lotov_id;
	}

	public long getOriginalSpisok_lotov_id() {
		return _originalSpisok_lotov_id;
	}

	@Override
	public int getCriteria_category_id() {
		return _criteria_category_id;
	}

	@Override
	public void setCriteria_category_id(int criteria_category_id) {
		_columnBitmask |= CRITERIA_CATEGORY_ID_COLUMN_BITMASK;

		if (!_setOriginalCriteria_category_id) {
			_setOriginalCriteria_category_id = true;

			_originalCriteria_category_id = _criteria_category_id;
		}

		_criteria_category_id = criteria_category_id;
	}

	public int getOriginalCriteria_category_id() {
		return _originalCriteria_category_id;
	}

	@Override
	public double getCriterias_weight() {
		return _criterias_weight;
	}

	@Override
	public void setCriterias_weight(double criterias_weight) {
		_criterias_weight = criterias_weight;
	}

	@Override
	public Date getCreated() {
		return _created;
	}

	@Override
	public void setCreated(Date created) {
		_created = created;
	}

	@Override
	public Date getUpdated() {
		return _updated;
	}

	@Override
	public void setUpdated(Date updated) {
		_updated = updated;
	}

	@Override
	public long getCreatedby() {
		return _createdby;
	}

	@Override
	public void setCreatedby(long createdby) {
		_createdby = createdby;
	}

	@Override
	public long getUpdatedby() {
		return _updatedby;
	}

	@Override
	public void setUpdatedby(long updatedby) {
		_updatedby = updatedby;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			CriteriasWeight.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CriteriasWeight toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (CriteriasWeight)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CriteriasWeightImpl criteriasWeightImpl = new CriteriasWeightImpl();

		criteriasWeightImpl.setCriterias_weight_id(getCriterias_weight_id());
		criteriasWeightImpl.setSpisok_lotov_id(getSpisok_lotov_id());
		criteriasWeightImpl.setCriteria_category_id(getCriteria_category_id());
		criteriasWeightImpl.setCriterias_weight(getCriterias_weight());
		criteriasWeightImpl.setCreated(getCreated());
		criteriasWeightImpl.setUpdated(getUpdated());
		criteriasWeightImpl.setCreatedby(getCreatedby());
		criteriasWeightImpl.setUpdatedby(getUpdatedby());

		criteriasWeightImpl.resetOriginalValues();

		return criteriasWeightImpl;
	}

	@Override
	public int compareTo(CriteriasWeight criteriasWeight) {
		long primaryKey = criteriasWeight.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof CriteriasWeight)) {
			return false;
		}

		CriteriasWeight criteriasWeight = (CriteriasWeight)obj;

		long primaryKey = criteriasWeight.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		CriteriasWeightModelImpl criteriasWeightModelImpl = this;

		criteriasWeightModelImpl._originalSpisok_lotov_id = criteriasWeightModelImpl._spisok_lotov_id;

		criteriasWeightModelImpl._setOriginalSpisok_lotov_id = false;

		criteriasWeightModelImpl._originalCriteria_category_id = criteriasWeightModelImpl._criteria_category_id;

		criteriasWeightModelImpl._setOriginalCriteria_category_id = false;

		criteriasWeightModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<CriteriasWeight> toCacheModel() {
		CriteriasWeightCacheModel criteriasWeightCacheModel = new CriteriasWeightCacheModel();

		criteriasWeightCacheModel.criterias_weight_id = getCriterias_weight_id();

		criteriasWeightCacheModel.spisok_lotov_id = getSpisok_lotov_id();

		criteriasWeightCacheModel.criteria_category_id = getCriteria_category_id();

		criteriasWeightCacheModel.criterias_weight = getCriterias_weight();

		Date created = getCreated();

		if (created != null) {
			criteriasWeightCacheModel.created = created.getTime();
		}
		else {
			criteriasWeightCacheModel.created = Long.MIN_VALUE;
		}

		Date updated = getUpdated();

		if (updated != null) {
			criteriasWeightCacheModel.updated = updated.getTime();
		}
		else {
			criteriasWeightCacheModel.updated = Long.MIN_VALUE;
		}

		criteriasWeightCacheModel.createdby = getCreatedby();

		criteriasWeightCacheModel.updatedby = getUpdatedby();

		return criteriasWeightCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{criterias_weight_id=");
		sb.append(getCriterias_weight_id());
		sb.append(", spisok_lotov_id=");
		sb.append(getSpisok_lotov_id());
		sb.append(", criteria_category_id=");
		sb.append(getCriteria_category_id());
		sb.append(", criterias_weight=");
		sb.append(getCriterias_weight());
		sb.append(", created=");
		sb.append(getCreated());
		sb.append(", updated=");
		sb.append(getUpdated());
		sb.append(", createdby=");
		sb.append(getCreatedby());
		sb.append(", updatedby=");
		sb.append(getUpdatedby());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("tj.criterias.model.CriteriasWeight");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>criterias_weight_id</column-name><column-value><![CDATA[");
		sb.append(getCriterias_weight_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>spisok_lotov_id</column-name><column-value><![CDATA[");
		sb.append(getSpisok_lotov_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>criteria_category_id</column-name><column-value><![CDATA[");
		sb.append(getCriteria_category_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>criterias_weight</column-name><column-value><![CDATA[");
		sb.append(getCriterias_weight());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>created</column-name><column-value><![CDATA[");
		sb.append(getCreated());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updated</column-name><column-value><![CDATA[");
		sb.append(getUpdated());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdby</column-name><column-value><![CDATA[");
		sb.append(getCreatedby());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedby</column-name><column-value><![CDATA[");
		sb.append(getUpdatedby());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = CriteriasWeight.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			CriteriasWeight.class
		};
	private long _criterias_weight_id;
	private long _spisok_lotov_id;
	private long _originalSpisok_lotov_id;
	private boolean _setOriginalSpisok_lotov_id;
	private int _criteria_category_id;
	private int _originalCriteria_category_id;
	private boolean _setOriginalCriteria_category_id;
	private double _criterias_weight;
	private Date _created;
	private Date _updated;
	private long _createdby;
	private long _updatedby;
	private long _columnBitmask;
	private CriteriasWeight _escapedModel;
}