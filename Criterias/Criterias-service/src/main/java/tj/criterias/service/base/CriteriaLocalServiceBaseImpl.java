/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package tj.criterias.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import tj.criterias.model.Criteria;

import tj.criterias.service.CriteriaLocalService;
import tj.criterias.service.persistence.CriteriaDefaultValuePersistence;
import tj.criterias.service.persistence.CriteriaPersistence;
import tj.criterias.service.persistence.CriteriaTemplatePersistence;
import tj.criterias.service.persistence.CriteriaValuePersistence;
import tj.criterias.service.persistence.CriteriasWeightPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the criteria local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link tj.criterias.service.impl.CriteriaLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see tj.criterias.service.impl.CriteriaLocalServiceImpl
 * @see tj.criterias.service.CriteriaLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class CriteriaLocalServiceBaseImpl extends BaseLocalServiceImpl
	implements CriteriaLocalService, IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link tj.criterias.service.CriteriaLocalServiceUtil} to access the criteria local service.
	 */

	/**
	 * Adds the criteria to the database. Also notifies the appropriate model listeners.
	 *
	 * @param criteria the criteria
	 * @return the criteria that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Criteria addCriteria(Criteria criteria) {
		criteria.setNew(true);

		return criteriaPersistence.update(criteria);
	}

	/**
	 * Creates a new criteria with the primary key. Does not add the criteria to the database.
	 *
	 * @param criteria_id the primary key for the new criteria
	 * @return the new criteria
	 */
	@Override
	public Criteria createCriteria(long criteria_id) {
		return criteriaPersistence.create(criteria_id);
	}

	/**
	 * Deletes the criteria with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param criteria_id the primary key of the criteria
	 * @return the criteria that was removed
	 * @throws PortalException if a criteria with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Criteria deleteCriteria(long criteria_id) throws PortalException {
		return criteriaPersistence.remove(criteria_id);
	}

	/**
	 * Deletes the criteria from the database. Also notifies the appropriate model listeners.
	 *
	 * @param criteria the criteria
	 * @return the criteria that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Criteria deleteCriteria(Criteria criteria) {
		return criteriaPersistence.remove(criteria);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(Criteria.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return criteriaPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link tj.criterias.model.impl.CriteriaModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return criteriaPersistence.findWithDynamicQuery(dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link tj.criterias.model.impl.CriteriaModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return criteriaPersistence.findWithDynamicQuery(dynamicQuery, start,
			end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return criteriaPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return criteriaPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public Criteria fetchCriteria(long criteria_id) {
		return criteriaPersistence.fetchByPrimaryKey(criteria_id);
	}

	/**
	 * Returns the criteria with the primary key.
	 *
	 * @param criteria_id the primary key of the criteria
	 * @return the criteria
	 * @throws PortalException if a criteria with the primary key could not be found
	 */
	@Override
	public Criteria getCriteria(long criteria_id) throws PortalException {
		return criteriaPersistence.findByPrimaryKey(criteria_id);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(criteriaLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(Criteria.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("criteria_id");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(criteriaLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(Criteria.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName("criteria_id");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(criteriaLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(Criteria.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("criteria_id");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return criteriaLocalService.deleteCriteria((Criteria)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return criteriaPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the criterias.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link tj.criterias.model.impl.CriteriaModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of criterias
	 * @param end the upper bound of the range of criterias (not inclusive)
	 * @return the range of criterias
	 */
	@Override
	public List<Criteria> getCriterias(int start, int end) {
		return criteriaPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of criterias.
	 *
	 * @return the number of criterias
	 */
	@Override
	public int getCriteriasCount() {
		return criteriaPersistence.countAll();
	}

	/**
	 * Updates the criteria in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param criteria the criteria
	 * @return the criteria that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Criteria updateCriteria(Criteria criteria) {
		return criteriaPersistence.update(criteria);
	}

	/**
	 * Returns the criteria local service.
	 *
	 * @return the criteria local service
	 */
	public CriteriaLocalService getCriteriaLocalService() {
		return criteriaLocalService;
	}

	/**
	 * Sets the criteria local service.
	 *
	 * @param criteriaLocalService the criteria local service
	 */
	public void setCriteriaLocalService(
		CriteriaLocalService criteriaLocalService) {
		this.criteriaLocalService = criteriaLocalService;
	}

	/**
	 * Returns the criteria persistence.
	 *
	 * @return the criteria persistence
	 */
	public CriteriaPersistence getCriteriaPersistence() {
		return criteriaPersistence;
	}

	/**
	 * Sets the criteria persistence.
	 *
	 * @param criteriaPersistence the criteria persistence
	 */
	public void setCriteriaPersistence(CriteriaPersistence criteriaPersistence) {
		this.criteriaPersistence = criteriaPersistence;
	}

	/**
	 * Returns the criteria default value local service.
	 *
	 * @return the criteria default value local service
	 */
	public tj.criterias.service.CriteriaDefaultValueLocalService getCriteriaDefaultValueLocalService() {
		return criteriaDefaultValueLocalService;
	}

	/**
	 * Sets the criteria default value local service.
	 *
	 * @param criteriaDefaultValueLocalService the criteria default value local service
	 */
	public void setCriteriaDefaultValueLocalService(
		tj.criterias.service.CriteriaDefaultValueLocalService criteriaDefaultValueLocalService) {
		this.criteriaDefaultValueLocalService = criteriaDefaultValueLocalService;
	}

	/**
	 * Returns the criteria default value persistence.
	 *
	 * @return the criteria default value persistence
	 */
	public CriteriaDefaultValuePersistence getCriteriaDefaultValuePersistence() {
		return criteriaDefaultValuePersistence;
	}

	/**
	 * Sets the criteria default value persistence.
	 *
	 * @param criteriaDefaultValuePersistence the criteria default value persistence
	 */
	public void setCriteriaDefaultValuePersistence(
		CriteriaDefaultValuePersistence criteriaDefaultValuePersistence) {
		this.criteriaDefaultValuePersistence = criteriaDefaultValuePersistence;
	}

	/**
	 * Returns the criterias weight local service.
	 *
	 * @return the criterias weight local service
	 */
	public tj.criterias.service.CriteriasWeightLocalService getCriteriasWeightLocalService() {
		return criteriasWeightLocalService;
	}

	/**
	 * Sets the criterias weight local service.
	 *
	 * @param criteriasWeightLocalService the criterias weight local service
	 */
	public void setCriteriasWeightLocalService(
		tj.criterias.service.CriteriasWeightLocalService criteriasWeightLocalService) {
		this.criteriasWeightLocalService = criteriasWeightLocalService;
	}

	/**
	 * Returns the criterias weight persistence.
	 *
	 * @return the criterias weight persistence
	 */
	public CriteriasWeightPersistence getCriteriasWeightPersistence() {
		return criteriasWeightPersistence;
	}

	/**
	 * Sets the criterias weight persistence.
	 *
	 * @param criteriasWeightPersistence the criterias weight persistence
	 */
	public void setCriteriasWeightPersistence(
		CriteriasWeightPersistence criteriasWeightPersistence) {
		this.criteriasWeightPersistence = criteriasWeightPersistence;
	}

	/**
	 * Returns the criteria template local service.
	 *
	 * @return the criteria template local service
	 */
	public tj.criterias.service.CriteriaTemplateLocalService getCriteriaTemplateLocalService() {
		return criteriaTemplateLocalService;
	}

	/**
	 * Sets the criteria template local service.
	 *
	 * @param criteriaTemplateLocalService the criteria template local service
	 */
	public void setCriteriaTemplateLocalService(
		tj.criterias.service.CriteriaTemplateLocalService criteriaTemplateLocalService) {
		this.criteriaTemplateLocalService = criteriaTemplateLocalService;
	}

	/**
	 * Returns the criteria template persistence.
	 *
	 * @return the criteria template persistence
	 */
	public CriteriaTemplatePersistence getCriteriaTemplatePersistence() {
		return criteriaTemplatePersistence;
	}

	/**
	 * Sets the criteria template persistence.
	 *
	 * @param criteriaTemplatePersistence the criteria template persistence
	 */
	public void setCriteriaTemplatePersistence(
		CriteriaTemplatePersistence criteriaTemplatePersistence) {
		this.criteriaTemplatePersistence = criteriaTemplatePersistence;
	}

	/**
	 * Returns the criteria value local service.
	 *
	 * @return the criteria value local service
	 */
	public tj.criterias.service.CriteriaValueLocalService getCriteriaValueLocalService() {
		return criteriaValueLocalService;
	}

	/**
	 * Sets the criteria value local service.
	 *
	 * @param criteriaValueLocalService the criteria value local service
	 */
	public void setCriteriaValueLocalService(
		tj.criterias.service.CriteriaValueLocalService criteriaValueLocalService) {
		this.criteriaValueLocalService = criteriaValueLocalService;
	}

	/**
	 * Returns the criteria value persistence.
	 *
	 * @return the criteria value persistence
	 */
	public CriteriaValuePersistence getCriteriaValuePersistence() {
		return criteriaValuePersistence;
	}

	/**
	 * Sets the criteria value persistence.
	 *
	 * @param criteriaValuePersistence the criteria value persistence
	 */
	public void setCriteriaValuePersistence(
		CriteriaValuePersistence criteriaValuePersistence) {
		this.criteriaValuePersistence = criteriaValuePersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("tj.criterias.model.Criteria",
			criteriaLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"tj.criterias.model.Criteria");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return CriteriaLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return Criteria.class;
	}

	protected String getModelClassName() {
		return Criteria.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = criteriaPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = CriteriaLocalService.class)
	protected CriteriaLocalService criteriaLocalService;
	@BeanReference(type = CriteriaPersistence.class)
	protected CriteriaPersistence criteriaPersistence;
	@BeanReference(type = tj.criterias.service.CriteriaDefaultValueLocalService.class)
	protected tj.criterias.service.CriteriaDefaultValueLocalService criteriaDefaultValueLocalService;
	@BeanReference(type = CriteriaDefaultValuePersistence.class)
	protected CriteriaDefaultValuePersistence criteriaDefaultValuePersistence;
	@BeanReference(type = tj.criterias.service.CriteriasWeightLocalService.class)
	protected tj.criterias.service.CriteriasWeightLocalService criteriasWeightLocalService;
	@BeanReference(type = CriteriasWeightPersistence.class)
	protected CriteriasWeightPersistence criteriasWeightPersistence;
	@BeanReference(type = tj.criterias.service.CriteriaTemplateLocalService.class)
	protected tj.criterias.service.CriteriaTemplateLocalService criteriaTemplateLocalService;
	@BeanReference(type = CriteriaTemplatePersistence.class)
	protected CriteriaTemplatePersistence criteriaTemplatePersistence;
	@BeanReference(type = tj.criterias.service.CriteriaValueLocalService.class)
	protected tj.criterias.service.CriteriaValueLocalService criteriaValueLocalService;
	@BeanReference(type = CriteriaValuePersistence.class)
	protected CriteriaValuePersistence criteriaValuePersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}