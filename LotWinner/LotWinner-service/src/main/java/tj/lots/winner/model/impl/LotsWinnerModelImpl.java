/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package tj.lots.winner.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import tj.lots.winner.model.LotsWinner;
import tj.lots.winner.model.LotsWinnerModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the LotsWinner service. Represents a row in the &quot;sapp.lot_winner&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link LotsWinnerModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LotsWinnerImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see LotsWinnerImpl
 * @see LotsWinner
 * @see LotsWinnerModel
 * @generated
 */
@ProviderType
public class LotsWinnerModelImpl extends BaseModelImpl<LotsWinner>
	implements LotsWinnerModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a lots winner model instance should use the {@link LotsWinner} interface instead.
	 */
	public static final String TABLE_NAME = "sapp.lot_winner";
	public static final Object[][] TABLE_COLUMNS = {
			{ "lot_winner_id", Types.BIGINT },
			{ "spisok_lotov_id", Types.BIGINT },
			{ "organization_id", Types.BIGINT },
			{ "total_price", Types.DOUBLE },
			{ "attribute", Types.VARCHAR },
			{ "serial_number", Types.INTEGER },
			{ "point", Types.DOUBLE }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("lot_winner_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("spisok_lotov_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("organization_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("total_price", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("attribute", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("serial_number", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("point", Types.DOUBLE);
	}

	public static final String TABLE_SQL_CREATE = "create table sapp.lot_winner (lot_winner_id LONG not null primary key,spisok_lotov_id LONG,organization_id LONG,total_price DOUBLE,attribute VARCHAR(75) null,serial_number INTEGER,point DOUBLE)";
	public static final String TABLE_SQL_DROP = "drop table sapp.lot_winner";
	public static final String ORDER_BY_JPQL = " ORDER BY lotsWinner.lot_winner_id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY sapp.lot_winner.lot_winner_id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(tj.lots.winner.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.tj.lots.winner.model.LotsWinner"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(tj.lots.winner.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.tj.lots.winner.model.LotsWinner"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(tj.lots.winner.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.tj.lots.winner.model.LotsWinner"),
			true);
	public static final long SERIAL_NUMBER_COLUMN_BITMASK = 1L;
	public static final long SPISOK_LOTOV_ID_COLUMN_BITMASK = 2L;
	public static final long LOT_WINNER_ID_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(tj.lots.winner.service.util.ServiceProps.get(
				"lock.expiration.time.tj.lots.winner.model.LotsWinner"));

	public LotsWinnerModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _lot_winner_id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setLot_winner_id(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _lot_winner_id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return LotsWinner.class;
	}

	@Override
	public String getModelClassName() {
		return LotsWinner.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("lot_winner_id", getLot_winner_id());
		attributes.put("spisok_lotov_id", getSpisok_lotov_id());
		attributes.put("organization_id", getOrganization_id());
		attributes.put("total_price", getTotal_price());
		attributes.put("attribute", getAttribute());
		attributes.put("serial_number", getSerial_number());
		attributes.put("point", getPoint());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long lot_winner_id = (Long)attributes.get("lot_winner_id");

		if (lot_winner_id != null) {
			setLot_winner_id(lot_winner_id);
		}

		Long spisok_lotov_id = (Long)attributes.get("spisok_lotov_id");

		if (spisok_lotov_id != null) {
			setSpisok_lotov_id(spisok_lotov_id);
		}

		Long organization_id = (Long)attributes.get("organization_id");

		if (organization_id != null) {
			setOrganization_id(organization_id);
		}

		Double total_price = (Double)attributes.get("total_price");

		if (total_price != null) {
			setTotal_price(total_price);
		}

		String attribute = (String)attributes.get("attribute");

		if (attribute != null) {
			setAttribute(attribute);
		}

		Integer serial_number = (Integer)attributes.get("serial_number");

		if (serial_number != null) {
			setSerial_number(serial_number);
		}

		Double point = (Double)attributes.get("point");

		if (point != null) {
			setPoint(point);
		}
	}

	@Override
	public long getLot_winner_id() {
		return _lot_winner_id;
	}

	@Override
	public void setLot_winner_id(long lot_winner_id) {
		_lot_winner_id = lot_winner_id;
	}

	@Override
	public long getSpisok_lotov_id() {
		return _spisok_lotov_id;
	}

	@Override
	public void setSpisok_lotov_id(long spisok_lotov_id) {
		_columnBitmask |= SPISOK_LOTOV_ID_COLUMN_BITMASK;

		if (!_setOriginalSpisok_lotov_id) {
			_setOriginalSpisok_lotov_id = true;

			_originalSpisok_lotov_id = _spisok_lotov_id;
		}

		_spisok_lotov_id = spisok_lotov_id;
	}

	public long getOriginalSpisok_lotov_id() {
		return _originalSpisok_lotov_id;
	}

	@Override
	public long getOrganization_id() {
		return _organization_id;
	}

	@Override
	public void setOrganization_id(long organization_id) {
		_organization_id = organization_id;
	}

	@Override
	public double getTotal_price() {
		return _total_price;
	}

	@Override
	public void setTotal_price(double total_price) {
		_total_price = total_price;
	}

	@Override
	public String getAttribute() {
		if (_attribute == null) {
			return StringPool.BLANK;
		}
		else {
			return _attribute;
		}
	}

	@Override
	public void setAttribute(String attribute) {
		_attribute = attribute;
	}

	@Override
	public int getSerial_number() {
		return _serial_number;
	}

	@Override
	public void setSerial_number(int serial_number) {
		_columnBitmask |= SERIAL_NUMBER_COLUMN_BITMASK;

		if (!_setOriginalSerial_number) {
			_setOriginalSerial_number = true;

			_originalSerial_number = _serial_number;
		}

		_serial_number = serial_number;
	}

	public int getOriginalSerial_number() {
		return _originalSerial_number;
	}

	@Override
	public double getPoint() {
		return _point;
	}

	@Override
	public void setPoint(double point) {
		_point = point;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			LotsWinner.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public LotsWinner toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (LotsWinner)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LotsWinnerImpl lotsWinnerImpl = new LotsWinnerImpl();

		lotsWinnerImpl.setLot_winner_id(getLot_winner_id());
		lotsWinnerImpl.setSpisok_lotov_id(getSpisok_lotov_id());
		lotsWinnerImpl.setOrganization_id(getOrganization_id());
		lotsWinnerImpl.setTotal_price(getTotal_price());
		lotsWinnerImpl.setAttribute(getAttribute());
		lotsWinnerImpl.setSerial_number(getSerial_number());
		lotsWinnerImpl.setPoint(getPoint());

		lotsWinnerImpl.resetOriginalValues();

		return lotsWinnerImpl;
	}

	@Override
	public int compareTo(LotsWinner lotsWinner) {
		long primaryKey = lotsWinner.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof LotsWinner)) {
			return false;
		}

		LotsWinner lotsWinner = (LotsWinner)obj;

		long primaryKey = lotsWinner.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		LotsWinnerModelImpl lotsWinnerModelImpl = this;

		lotsWinnerModelImpl._originalSpisok_lotov_id = lotsWinnerModelImpl._spisok_lotov_id;

		lotsWinnerModelImpl._setOriginalSpisok_lotov_id = false;

		lotsWinnerModelImpl._originalSerial_number = lotsWinnerModelImpl._serial_number;

		lotsWinnerModelImpl._setOriginalSerial_number = false;

		lotsWinnerModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<LotsWinner> toCacheModel() {
		LotsWinnerCacheModel lotsWinnerCacheModel = new LotsWinnerCacheModel();

		lotsWinnerCacheModel.lot_winner_id = getLot_winner_id();

		lotsWinnerCacheModel.spisok_lotov_id = getSpisok_lotov_id();

		lotsWinnerCacheModel.organization_id = getOrganization_id();

		lotsWinnerCacheModel.total_price = getTotal_price();

		lotsWinnerCacheModel.attribute = getAttribute();

		String attribute = lotsWinnerCacheModel.attribute;

		if ((attribute != null) && (attribute.length() == 0)) {
			lotsWinnerCacheModel.attribute = null;
		}

		lotsWinnerCacheModel.serial_number = getSerial_number();

		lotsWinnerCacheModel.point = getPoint();

		return lotsWinnerCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{lot_winner_id=");
		sb.append(getLot_winner_id());
		sb.append(", spisok_lotov_id=");
		sb.append(getSpisok_lotov_id());
		sb.append(", organization_id=");
		sb.append(getOrganization_id());
		sb.append(", total_price=");
		sb.append(getTotal_price());
		sb.append(", attribute=");
		sb.append(getAttribute());
		sb.append(", serial_number=");
		sb.append(getSerial_number());
		sb.append(", point=");
		sb.append(getPoint());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("tj.lots.winner.model.LotsWinner");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>lot_winner_id</column-name><column-value><![CDATA[");
		sb.append(getLot_winner_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>spisok_lotov_id</column-name><column-value><![CDATA[");
		sb.append(getSpisok_lotov_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>organization_id</column-name><column-value><![CDATA[");
		sb.append(getOrganization_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>total_price</column-name><column-value><![CDATA[");
		sb.append(getTotal_price());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>attribute</column-name><column-value><![CDATA[");
		sb.append(getAttribute());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>serial_number</column-name><column-value><![CDATA[");
		sb.append(getSerial_number());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>point</column-name><column-value><![CDATA[");
		sb.append(getPoint());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = LotsWinner.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			LotsWinner.class
		};
	private long _lot_winner_id;
	private long _spisok_lotov_id;
	private long _originalSpisok_lotov_id;
	private boolean _setOriginalSpisok_lotov_id;
	private long _organization_id;
	private double _total_price;
	private String _attribute;
	private int _serial_number;
	private int _originalSerial_number;
	private boolean _setOriginalSerial_number;
	private double _point;
	private long _columnBitmask;
	private LotsWinner _escapedModel;
}