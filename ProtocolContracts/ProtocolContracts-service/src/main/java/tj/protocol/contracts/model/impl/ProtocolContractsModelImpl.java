/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package tj.protocol.contracts.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import tj.protocol.contracts.model.ProtocolContracts;
import tj.protocol.contracts.model.ProtocolContractsModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ProtocolContracts service. Represents a row in the &quot;sapp.protocol_contracts&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ProtocolContractsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProtocolContractsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ProtocolContractsImpl
 * @see ProtocolContracts
 * @see ProtocolContractsModel
 * @generated
 */
@ProviderType
public class ProtocolContractsModelImpl extends BaseModelImpl<ProtocolContracts>
	implements ProtocolContractsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a protocol contracts model instance should use the {@link ProtocolContracts} interface instead.
	 */
	public static final String TABLE_NAME = "sapp.protocol_contracts";
	public static final Object[][] TABLE_COLUMNS = {
			{ "protocol_contracts_id", Types.BIGINT },
			{ "izvewenie_id", Types.BIGINT },
			{ "created", Types.TIMESTAMP },
			{ "updated", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("protocol_contracts_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("izvewenie_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("created", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("updated", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table sapp.protocol_contracts (protocol_contracts_id LONG not null primary key,izvewenie_id LONG,created DATE null,updated DATE null)";
	public static final String TABLE_SQL_DROP = "drop table sapp.protocol_contracts";
	public static final String ORDER_BY_JPQL = " ORDER BY protocolContracts.protocol_contracts_id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY sapp.protocol_contracts.protocol_contracts_id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(tj.protocol.contracts.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.tj.protocol.contracts.model.ProtocolContracts"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(tj.protocol.contracts.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.tj.protocol.contracts.model.ProtocolContracts"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(tj.protocol.contracts.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.tj.protocol.contracts.model.ProtocolContracts"),
			true);
	public static final long IZVEWENIE_ID_COLUMN_BITMASK = 1L;
	public static final long PROTOCOL_CONTRACTS_ID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(tj.protocol.contracts.service.util.ServiceProps.get(
				"lock.expiration.time.tj.protocol.contracts.model.ProtocolContracts"));

	public ProtocolContractsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _protocol_contracts_id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setProtocol_contracts_id(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _protocol_contracts_id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ProtocolContracts.class;
	}

	@Override
	public String getModelClassName() {
		return ProtocolContracts.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("protocol_contracts_id", getProtocol_contracts_id());
		attributes.put("izvewenie_id", getIzvewenie_id());
		attributes.put("created", getCreated());
		attributes.put("updated", getUpdated());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long protocol_contracts_id = (Long)attributes.get(
				"protocol_contracts_id");

		if (protocol_contracts_id != null) {
			setProtocol_contracts_id(protocol_contracts_id);
		}

		Long izvewenie_id = (Long)attributes.get("izvewenie_id");

		if (izvewenie_id != null) {
			setIzvewenie_id(izvewenie_id);
		}

		Date created = (Date)attributes.get("created");

		if (created != null) {
			setCreated(created);
		}

		Date updated = (Date)attributes.get("updated");

		if (updated != null) {
			setUpdated(updated);
		}
	}

	@Override
	public long getProtocol_contracts_id() {
		return _protocol_contracts_id;
	}

	@Override
	public void setProtocol_contracts_id(long protocol_contracts_id) {
		_protocol_contracts_id = protocol_contracts_id;
	}

	@Override
	public long getIzvewenie_id() {
		return _izvewenie_id;
	}

	@Override
	public void setIzvewenie_id(long izvewenie_id) {
		_columnBitmask |= IZVEWENIE_ID_COLUMN_BITMASK;

		if (!_setOriginalIzvewenie_id) {
			_setOriginalIzvewenie_id = true;

			_originalIzvewenie_id = _izvewenie_id;
		}

		_izvewenie_id = izvewenie_id;
	}

	public long getOriginalIzvewenie_id() {
		return _originalIzvewenie_id;
	}

	@Override
	public Date getCreated() {
		return _created;
	}

	@Override
	public void setCreated(Date created) {
		_created = created;
	}

	@Override
	public Date getUpdated() {
		return _updated;
	}

	@Override
	public void setUpdated(Date updated) {
		_updated = updated;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ProtocolContracts.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ProtocolContracts toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ProtocolContracts)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ProtocolContractsImpl protocolContractsImpl = new ProtocolContractsImpl();

		protocolContractsImpl.setProtocol_contracts_id(getProtocol_contracts_id());
		protocolContractsImpl.setIzvewenie_id(getIzvewenie_id());
		protocolContractsImpl.setCreated(getCreated());
		protocolContractsImpl.setUpdated(getUpdated());

		protocolContractsImpl.resetOriginalValues();

		return protocolContractsImpl;
	}

	@Override
	public int compareTo(ProtocolContracts protocolContracts) {
		long primaryKey = protocolContracts.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ProtocolContracts)) {
			return false;
		}

		ProtocolContracts protocolContracts = (ProtocolContracts)obj;

		long primaryKey = protocolContracts.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ProtocolContractsModelImpl protocolContractsModelImpl = this;

		protocolContractsModelImpl._originalIzvewenie_id = protocolContractsModelImpl._izvewenie_id;

		protocolContractsModelImpl._setOriginalIzvewenie_id = false;

		protocolContractsModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ProtocolContracts> toCacheModel() {
		ProtocolContractsCacheModel protocolContractsCacheModel = new ProtocolContractsCacheModel();

		protocolContractsCacheModel.protocol_contracts_id = getProtocol_contracts_id();

		protocolContractsCacheModel.izvewenie_id = getIzvewenie_id();

		Date created = getCreated();

		if (created != null) {
			protocolContractsCacheModel.created = created.getTime();
		}
		else {
			protocolContractsCacheModel.created = Long.MIN_VALUE;
		}

		Date updated = getUpdated();

		if (updated != null) {
			protocolContractsCacheModel.updated = updated.getTime();
		}
		else {
			protocolContractsCacheModel.updated = Long.MIN_VALUE;
		}

		return protocolContractsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{protocol_contracts_id=");
		sb.append(getProtocol_contracts_id());
		sb.append(", izvewenie_id=");
		sb.append(getIzvewenie_id());
		sb.append(", created=");
		sb.append(getCreated());
		sb.append(", updated=");
		sb.append(getUpdated());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("tj.protocol.contracts.model.ProtocolContracts");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>protocol_contracts_id</column-name><column-value><![CDATA[");
		sb.append(getProtocol_contracts_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>izvewenie_id</column-name><column-value><![CDATA[");
		sb.append(getIzvewenie_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>created</column-name><column-value><![CDATA[");
		sb.append(getCreated());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updated</column-name><column-value><![CDATA[");
		sb.append(getUpdated());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = ProtocolContracts.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			ProtocolContracts.class
		};
	private long _protocol_contracts_id;
	private long _izvewenie_id;
	private long _originalIzvewenie_id;
	private boolean _setOriginalIzvewenie_id;
	private Date _created;
	private Date _updated;
	private long _columnBitmask;
	private ProtocolContracts _escapedModel;
}