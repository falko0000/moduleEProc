/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package tj.tariff.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import tj.tariff.model.Tariff;
import tj.tariff.model.TariffModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Tariff service. Represents a row in the &quot;sapp.tariff&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link TariffModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TariffImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see TariffImpl
 * @see Tariff
 * @see TariffModel
 * @generated
 */
@ProviderType
public class TariffModelImpl extends BaseModelImpl<Tariff>
	implements TariffModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a tariff model instance should use the {@link Tariff} interface instead.
	 */
	public static final String TABLE_NAME = "sapp.tariff";
	public static final Object[][] TABLE_COLUMNS = {
			{ "tariff_id", Types.BIGINT },
			{ "region_id", Types.BIGINT },
			{ "type_tariff", Types.INTEGER },
			{ "tariff_value", Types.DOUBLE }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("tariff_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("region_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("type_tariff", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("tariff_value", Types.DOUBLE);
	}

	public static final String TABLE_SQL_CREATE = "create table sapp.tariff (tariff_id LONG not null primary key,region_id LONG,type_tariff INTEGER,tariff_value DOUBLE)";
	public static final String TABLE_SQL_DROP = "drop table sapp.tariff";
	public static final String ORDER_BY_JPQL = " ORDER BY tariff.tariff_id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY sapp.tariff.tariff_id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(tj.tariff.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.tj.tariff.model.Tariff"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(tj.tariff.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.tj.tariff.model.Tariff"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(tj.tariff.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.tj.tariff.model.Tariff"),
			true);
	public static final long REGION_ID_COLUMN_BITMASK = 1L;
	public static final long TYPE_TARIFF_COLUMN_BITMASK = 2L;
	public static final long TARIFF_ID_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(tj.tariff.service.util.ServiceProps.get(
				"lock.expiration.time.tj.tariff.model.Tariff"));

	public TariffModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _tariff_id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTariff_id(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _tariff_id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Tariff.class;
	}

	@Override
	public String getModelClassName() {
		return Tariff.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("tariff_id", getTariff_id());
		attributes.put("region_id", getRegion_id());
		attributes.put("type_tariff", getType_tariff());
		attributes.put("tariff_value", getTariff_value());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long tariff_id = (Long)attributes.get("tariff_id");

		if (tariff_id != null) {
			setTariff_id(tariff_id);
		}

		Long region_id = (Long)attributes.get("region_id");

		if (region_id != null) {
			setRegion_id(region_id);
		}

		Integer type_tariff = (Integer)attributes.get("type_tariff");

		if (type_tariff != null) {
			setType_tariff(type_tariff);
		}

		Double tariff_value = (Double)attributes.get("tariff_value");

		if (tariff_value != null) {
			setTariff_value(tariff_value);
		}
	}

	@Override
	public long getTariff_id() {
		return _tariff_id;
	}

	@Override
	public void setTariff_id(long tariff_id) {
		_tariff_id = tariff_id;
	}

	@Override
	public long getRegion_id() {
		return _region_id;
	}

	@Override
	public void setRegion_id(long region_id) {
		_columnBitmask |= REGION_ID_COLUMN_BITMASK;

		if (!_setOriginalRegion_id) {
			_setOriginalRegion_id = true;

			_originalRegion_id = _region_id;
		}

		_region_id = region_id;
	}

	public long getOriginalRegion_id() {
		return _originalRegion_id;
	}

	@Override
	public int getType_tariff() {
		return _type_tariff;
	}

	@Override
	public void setType_tariff(int type_tariff) {
		_columnBitmask |= TYPE_TARIFF_COLUMN_BITMASK;

		if (!_setOriginalType_tariff) {
			_setOriginalType_tariff = true;

			_originalType_tariff = _type_tariff;
		}

		_type_tariff = type_tariff;
	}

	public int getOriginalType_tariff() {
		return _originalType_tariff;
	}

	@Override
	public double getTariff_value() {
		return _tariff_value;
	}

	@Override
	public void setTariff_value(double tariff_value) {
		_tariff_value = tariff_value;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Tariff.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Tariff toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Tariff)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TariffImpl tariffImpl = new TariffImpl();

		tariffImpl.setTariff_id(getTariff_id());
		tariffImpl.setRegion_id(getRegion_id());
		tariffImpl.setType_tariff(getType_tariff());
		tariffImpl.setTariff_value(getTariff_value());

		tariffImpl.resetOriginalValues();

		return tariffImpl;
	}

	@Override
	public int compareTo(Tariff tariff) {
		long primaryKey = tariff.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Tariff)) {
			return false;
		}

		Tariff tariff = (Tariff)obj;

		long primaryKey = tariff.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		TariffModelImpl tariffModelImpl = this;

		tariffModelImpl._originalRegion_id = tariffModelImpl._region_id;

		tariffModelImpl._setOriginalRegion_id = false;

		tariffModelImpl._originalType_tariff = tariffModelImpl._type_tariff;

		tariffModelImpl._setOriginalType_tariff = false;

		tariffModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Tariff> toCacheModel() {
		TariffCacheModel tariffCacheModel = new TariffCacheModel();

		tariffCacheModel.tariff_id = getTariff_id();

		tariffCacheModel.region_id = getRegion_id();

		tariffCacheModel.type_tariff = getType_tariff();

		tariffCacheModel.tariff_value = getTariff_value();

		return tariffCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{tariff_id=");
		sb.append(getTariff_id());
		sb.append(", region_id=");
		sb.append(getRegion_id());
		sb.append(", type_tariff=");
		sb.append(getType_tariff());
		sb.append(", tariff_value=");
		sb.append(getTariff_value());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("tj.tariff.model.Tariff");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>tariff_id</column-name><column-value><![CDATA[");
		sb.append(getTariff_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>region_id</column-name><column-value><![CDATA[");
		sb.append(getRegion_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>type_tariff</column-name><column-value><![CDATA[");
		sb.append(getType_tariff());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tariff_value</column-name><column-value><![CDATA[");
		sb.append(getTariff_value());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Tariff.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Tariff.class
		};
	private long _tariff_id;
	private long _region_id;
	private long _originalRegion_id;
	private boolean _setOriginalRegion_id;
	private int _type_tariff;
	private int _originalType_tariff;
	private boolean _setOriginalType_tariff;
	private double _tariff_value;
	private long _columnBitmask;
	private Tariff _escapedModel;
}