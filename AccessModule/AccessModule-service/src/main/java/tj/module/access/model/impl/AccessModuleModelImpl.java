/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package tj.module.access.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import tj.module.access.model.AccessModule;
import tj.module.access.model.AccessModuleModel;
import tj.module.access.model.AccessModuleSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the AccessModule service. Represents a row in the &quot;sapp.dostup&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link AccessModuleModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AccessModuleImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AccessModuleImpl
 * @see AccessModule
 * @see AccessModuleModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class AccessModuleModelImpl extends BaseModelImpl<AccessModule>
	implements AccessModuleModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a access module model instance should use the {@link AccessModule} interface instead.
	 */
	public static final String TABLE_NAME = "sapp.dostup";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "dostup_id", Types.BIGINT },
			{ "izvewenije_id", Types.BIGINT },
			{ "user_id", Types.BIGINT },
			{ "createdby", Types.BIGINT },
			{ "created", Types.TIMESTAMP },
			{ "updatedby", Types.BIGINT },
			{ "updated", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dostup_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("izvewenije_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("user_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createdby", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("created", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("updatedby", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("updated", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table sapp.dostup (uuid_ VARCHAR(75) null,dostup_id LONG not null primary key,izvewenije_id LONG,user_id LONG,createdby LONG,created DATE null,updatedby LONG,updated DATE null)";
	public static final String TABLE_SQL_DROP = "drop table sapp.dostup";
	public static final String ORDER_BY_JPQL = " ORDER BY accessModule.dostup_id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY sapp.dostup.dostup_id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(tj.module.access.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.tj.module.access.model.AccessModule"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(tj.module.access.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.tj.module.access.model.AccessModule"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(tj.module.access.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.tj.module.access.model.AccessModule"),
			true);
	public static final long UUID_COLUMN_BITMASK = 1L;
	public static final long DOSTUP_ID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static AccessModule toModel(AccessModuleSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		AccessModule model = new AccessModuleImpl();

		model.setUuid(soapModel.getUuid());
		model.setDostup_id(soapModel.getDostup_id());
		model.setIzvewenije_id(soapModel.getIzvewenije_id());
		model.setUser_id(soapModel.getUser_id());
		model.setCreatedby(soapModel.getCreatedby());
		model.setCreated(soapModel.getCreated());
		model.setUpdatedby(soapModel.getUpdatedby());
		model.setUpdated(soapModel.getUpdated());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<AccessModule> toModels(AccessModuleSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<AccessModule> models = new ArrayList<AccessModule>(soapModels.length);

		for (AccessModuleSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(tj.module.access.service.util.ServiceProps.get(
				"lock.expiration.time.tj.module.access.model.AccessModule"));

	public AccessModuleModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _dostup_id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDostup_id(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _dostup_id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AccessModule.class;
	}

	@Override
	public String getModelClassName() {
		return AccessModule.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("dostup_id", getDostup_id());
		attributes.put("izvewenije_id", getIzvewenije_id());
		attributes.put("user_id", getUser_id());
		attributes.put("createdby", getCreatedby());
		attributes.put("created", getCreated());
		attributes.put("updatedby", getUpdatedby());
		attributes.put("updated", getUpdated());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long dostup_id = (Long)attributes.get("dostup_id");

		if (dostup_id != null) {
			setDostup_id(dostup_id);
		}

		Long izvewenije_id = (Long)attributes.get("izvewenije_id");

		if (izvewenije_id != null) {
			setIzvewenije_id(izvewenije_id);
		}

		Long user_id = (Long)attributes.get("user_id");

		if (user_id != null) {
			setUser_id(user_id);
		}

		Long createdby = (Long)attributes.get("createdby");

		if (createdby != null) {
			setCreatedby(createdby);
		}

		Date created = (Date)attributes.get("created");

		if (created != null) {
			setCreated(created);
		}

		Long updatedby = (Long)attributes.get("updatedby");

		if (updatedby != null) {
			setUpdatedby(updatedby);
		}

		Date updated = (Date)attributes.get("updated");

		if (updated != null) {
			setUpdated(updated);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getDostup_id() {
		return _dostup_id;
	}

	@Override
	public void setDostup_id(long dostup_id) {
		_dostup_id = dostup_id;
	}

	@JSON
	@Override
	public long getIzvewenije_id() {
		return _izvewenije_id;
	}

	@Override
	public void setIzvewenije_id(long izvewenije_id) {
		_izvewenije_id = izvewenije_id;
	}

	@JSON
	@Override
	public long getUser_id() {
		return _user_id;
	}

	@Override
	public void setUser_id(long user_id) {
		_user_id = user_id;
	}

	@JSON
	@Override
	public long getCreatedby() {
		return _createdby;
	}

	@Override
	public void setCreatedby(long createdby) {
		_createdby = createdby;
	}

	@JSON
	@Override
	public Date getCreated() {
		return _created;
	}

	@Override
	public void setCreated(Date created) {
		_created = created;
	}

	@JSON
	@Override
	public long getUpdatedby() {
		return _updatedby;
	}

	@Override
	public void setUpdatedby(long updatedby) {
		_updatedby = updatedby;
	}

	@JSON
	@Override
	public Date getUpdated() {
		return _updated;
	}

	@Override
	public void setUpdated(Date updated) {
		_updated = updated;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			AccessModule.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AccessModule toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (AccessModule)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AccessModuleImpl accessModuleImpl = new AccessModuleImpl();

		accessModuleImpl.setUuid(getUuid());
		accessModuleImpl.setDostup_id(getDostup_id());
		accessModuleImpl.setIzvewenije_id(getIzvewenije_id());
		accessModuleImpl.setUser_id(getUser_id());
		accessModuleImpl.setCreatedby(getCreatedby());
		accessModuleImpl.setCreated(getCreated());
		accessModuleImpl.setUpdatedby(getUpdatedby());
		accessModuleImpl.setUpdated(getUpdated());

		accessModuleImpl.resetOriginalValues();

		return accessModuleImpl;
	}

	@Override
	public int compareTo(AccessModule accessModule) {
		long primaryKey = accessModule.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof AccessModule)) {
			return false;
		}

		AccessModule accessModule = (AccessModule)obj;

		long primaryKey = accessModule.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		AccessModuleModelImpl accessModuleModelImpl = this;

		accessModuleModelImpl._originalUuid = accessModuleModelImpl._uuid;

		accessModuleModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<AccessModule> toCacheModel() {
		AccessModuleCacheModel accessModuleCacheModel = new AccessModuleCacheModel();

		accessModuleCacheModel.uuid = getUuid();

		String uuid = accessModuleCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			accessModuleCacheModel.uuid = null;
		}

		accessModuleCacheModel.dostup_id = getDostup_id();

		accessModuleCacheModel.izvewenije_id = getIzvewenije_id();

		accessModuleCacheModel.user_id = getUser_id();

		accessModuleCacheModel.createdby = getCreatedby();

		Date created = getCreated();

		if (created != null) {
			accessModuleCacheModel.created = created.getTime();
		}
		else {
			accessModuleCacheModel.created = Long.MIN_VALUE;
		}

		accessModuleCacheModel.updatedby = getUpdatedby();

		Date updated = getUpdated();

		if (updated != null) {
			accessModuleCacheModel.updated = updated.getTime();
		}
		else {
			accessModuleCacheModel.updated = Long.MIN_VALUE;
		}

		return accessModuleCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", dostup_id=");
		sb.append(getDostup_id());
		sb.append(", izvewenije_id=");
		sb.append(getIzvewenije_id());
		sb.append(", user_id=");
		sb.append(getUser_id());
		sb.append(", createdby=");
		sb.append(getCreatedby());
		sb.append(", created=");
		sb.append(getCreated());
		sb.append(", updatedby=");
		sb.append(getUpdatedby());
		sb.append(", updated=");
		sb.append(getUpdated());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("tj.module.access.model.AccessModule");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dostup_id</column-name><column-value><![CDATA[");
		sb.append(getDostup_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>izvewenije_id</column-name><column-value><![CDATA[");
		sb.append(getIzvewenije_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>user_id</column-name><column-value><![CDATA[");
		sb.append(getUser_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdby</column-name><column-value><![CDATA[");
		sb.append(getCreatedby());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>created</column-name><column-value><![CDATA[");
		sb.append(getCreated());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedby</column-name><column-value><![CDATA[");
		sb.append(getUpdatedby());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updated</column-name><column-value><![CDATA[");
		sb.append(getUpdated());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = AccessModule.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			AccessModule.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _dostup_id;
	private long _izvewenije_id;
	private long _user_id;
	private long _createdby;
	private Date _created;
	private long _updatedby;
	private Date _updated;
	private long _columnBitmask;
	private AccessModule _escapedModel;
}