/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package tj.tipy.izvewenij.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import tj.tipy.izvewenij.model.tipy_izvewenij;
import tj.tipy.izvewenij.model.tipy_izvewenijModel;
import tj.tipy.izvewenij.model.tipy_izvewenijSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the tipy_izvewenij service. Represents a row in the &quot;sapp.tipy_izvewenij&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link tipy_izvewenijModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link tipy_izvewenijImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see tipy_izvewenijImpl
 * @see tipy_izvewenij
 * @see tipy_izvewenijModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class tipy_izvewenijModelImpl extends BaseModelImpl<tipy_izvewenij>
	implements tipy_izvewenijModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a tipy_izvewenij model instance should use the {@link tipy_izvewenij} interface instead.
	 */
	public static final String TABLE_NAME = "sapp.tipy_izvewenij";
	public static final Object[][] TABLE_COLUMNS = {
			{ "tip", Types.VARCHAR },
			{ "tipy_izvewenij_id", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("tip", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tipy_izvewenij_id", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table sapp.tipy_izvewenij (tip VARCHAR(75) null,tipy_izvewenij_id LONG not null primary key)";
	public static final String TABLE_SQL_DROP = "drop table sapp.tipy_izvewenij";
	public static final String ORDER_BY_JPQL = " ORDER BY tipy_izvewenij.tipy_izvewenij_id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY sapp.tipy_izvewenij.tipy_izvewenij_id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(tj.tipy.izvewenij.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.tj.tipy.izvewenij.model.tipy_izvewenij"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(tj.tipy.izvewenij.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.tj.tipy.izvewenij.model.tipy_izvewenij"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static tipy_izvewenij toModel(tipy_izvewenijSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		tipy_izvewenij model = new tipy_izvewenijImpl();

		model.setTip(soapModel.getTip());
		model.setTipy_izvewenij_id(soapModel.getTipy_izvewenij_id());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<tipy_izvewenij> toModels(tipy_izvewenijSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<tipy_izvewenij> models = new ArrayList<tipy_izvewenij>(soapModels.length);

		for (tipy_izvewenijSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(tj.tipy.izvewenij.service.util.ServiceProps.get(
				"lock.expiration.time.tj.tipy.izvewenij.model.tipy_izvewenij"));

	public tipy_izvewenijModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _tipy_izvewenij_id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTipy_izvewenij_id(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _tipy_izvewenij_id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return tipy_izvewenij.class;
	}

	@Override
	public String getModelClassName() {
		return tipy_izvewenij.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("tip", getTip());
		attributes.put("tipy_izvewenij_id", getTipy_izvewenij_id());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String tip = (String)attributes.get("tip");

		if (tip != null) {
			setTip(tip);
		}

		Long tipy_izvewenij_id = (Long)attributes.get("tipy_izvewenij_id");

		if (tipy_izvewenij_id != null) {
			setTipy_izvewenij_id(tipy_izvewenij_id);
		}
	}

	@JSON
	@Override
	public String getTip() {
		if (_tip == null) {
			return StringPool.BLANK;
		}
		else {
			return _tip;
		}
	}

	@Override
	public void setTip(String tip) {
		_tip = tip;
	}

	@JSON
	@Override
	public long getTipy_izvewenij_id() {
		return _tipy_izvewenij_id;
	}

	@Override
	public void setTipy_izvewenij_id(long tipy_izvewenij_id) {
		_tipy_izvewenij_id = tipy_izvewenij_id;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			tipy_izvewenij.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public tipy_izvewenij toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (tipy_izvewenij)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		tipy_izvewenijImpl tipy_izvewenijImpl = new tipy_izvewenijImpl();

		tipy_izvewenijImpl.setTip(getTip());
		tipy_izvewenijImpl.setTipy_izvewenij_id(getTipy_izvewenij_id());

		tipy_izvewenijImpl.resetOriginalValues();

		return tipy_izvewenijImpl;
	}

	@Override
	public int compareTo(tipy_izvewenij tipy_izvewenij) {
		long primaryKey = tipy_izvewenij.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof tipy_izvewenij)) {
			return false;
		}

		tipy_izvewenij tipy_izvewenij = (tipy_izvewenij)obj;

		long primaryKey = tipy_izvewenij.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<tipy_izvewenij> toCacheModel() {
		tipy_izvewenijCacheModel tipy_izvewenijCacheModel = new tipy_izvewenijCacheModel();

		tipy_izvewenijCacheModel.tip = getTip();

		String tip = tipy_izvewenijCacheModel.tip;

		if ((tip != null) && (tip.length() == 0)) {
			tipy_izvewenijCacheModel.tip = null;
		}

		tipy_izvewenijCacheModel.tipy_izvewenij_id = getTipy_izvewenij_id();

		return tipy_izvewenijCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{tip=");
		sb.append(getTip());
		sb.append(", tipy_izvewenij_id=");
		sb.append(getTipy_izvewenij_id());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("tj.tipy.izvewenij.model.tipy_izvewenij");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>tip</column-name><column-value><![CDATA[");
		sb.append(getTip());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tipy_izvewenij_id</column-name><column-value><![CDATA[");
		sb.append(getTipy_izvewenij_id());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = tipy_izvewenij.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			tipy_izvewenij.class
		};
	private String _tip;
	private long _tipy_izvewenij_id;
	private tipy_izvewenij _escapedModel;
}