/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package tj.tipy.izvewenij.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import tj.tipy.izvewenij.model.tipy_izvewenij;
import tj.tipy.izvewenij.service.persistence.tipy_izvewenijPersistence;
import tj.tipy.izvewenij.service.tipy_izvewenijLocalService;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the tipy_izvewenij local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link tj.tipy.izvewenij.service.impl.tipy_izvewenijLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see tj.tipy.izvewenij.service.impl.tipy_izvewenijLocalServiceImpl
 * @see tj.tipy.izvewenij.service.tipy_izvewenijLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class tipy_izvewenijLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements tipy_izvewenijLocalService,
		IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link tj.tipy.izvewenij.service.tipy_izvewenijLocalServiceUtil} to access the tipy_izvewenij local service.
	 */

	/**
	 * Adds the tipy_izvewenij to the database. Also notifies the appropriate model listeners.
	 *
	 * @param tipy_izvewenij the tipy_izvewenij
	 * @return the tipy_izvewenij that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public tipy_izvewenij addtipy_izvewenij(tipy_izvewenij tipy_izvewenij) {
		tipy_izvewenij.setNew(true);

		return tipy_izvewenijPersistence.update(tipy_izvewenij);
	}

	/**
	 * Creates a new tipy_izvewenij with the primary key. Does not add the tipy_izvewenij to the database.
	 *
	 * @param tipy_izvewenij_id the primary key for the new tipy_izvewenij
	 * @return the new tipy_izvewenij
	 */
	@Override
	public tipy_izvewenij createtipy_izvewenij(long tipy_izvewenij_id) {
		return tipy_izvewenijPersistence.create(tipy_izvewenij_id);
	}

	/**
	 * Deletes the tipy_izvewenij with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param tipy_izvewenij_id the primary key of the tipy_izvewenij
	 * @return the tipy_izvewenij that was removed
	 * @throws PortalException if a tipy_izvewenij with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public tipy_izvewenij deletetipy_izvewenij(long tipy_izvewenij_id)
		throws PortalException {
		return tipy_izvewenijPersistence.remove(tipy_izvewenij_id);
	}

	/**
	 * Deletes the tipy_izvewenij from the database. Also notifies the appropriate model listeners.
	 *
	 * @param tipy_izvewenij the tipy_izvewenij
	 * @return the tipy_izvewenij that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public tipy_izvewenij deletetipy_izvewenij(tipy_izvewenij tipy_izvewenij) {
		return tipy_izvewenijPersistence.remove(tipy_izvewenij);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(tipy_izvewenij.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return tipy_izvewenijPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link tj.tipy.izvewenij.model.impl.tipy_izvewenijModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return tipy_izvewenijPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link tj.tipy.izvewenij.model.impl.tipy_izvewenijModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return tipy_izvewenijPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return tipy_izvewenijPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return tipy_izvewenijPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public tipy_izvewenij fetchtipy_izvewenij(long tipy_izvewenij_id) {
		return tipy_izvewenijPersistence.fetchByPrimaryKey(tipy_izvewenij_id);
	}

	/**
	 * Returns the tipy_izvewenij with the primary key.
	 *
	 * @param tipy_izvewenij_id the primary key of the tipy_izvewenij
	 * @return the tipy_izvewenij
	 * @throws PortalException if a tipy_izvewenij with the primary key could not be found
	 */
	@Override
	public tipy_izvewenij gettipy_izvewenij(long tipy_izvewenij_id)
		throws PortalException {
		return tipy_izvewenijPersistence.findByPrimaryKey(tipy_izvewenij_id);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(tipy_izvewenijLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(tipy_izvewenij.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("tipy_izvewenij_id");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(tipy_izvewenijLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(tipy_izvewenij.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName(
			"tipy_izvewenij_id");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(tipy_izvewenijLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(tipy_izvewenij.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("tipy_izvewenij_id");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return tipy_izvewenijLocalService.deletetipy_izvewenij((tipy_izvewenij)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return tipy_izvewenijPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the tipy_izvewenijs.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link tj.tipy.izvewenij.model.impl.tipy_izvewenijModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of tipy_izvewenijs
	 * @param end the upper bound of the range of tipy_izvewenijs (not inclusive)
	 * @return the range of tipy_izvewenijs
	 */
	@Override
	public List<tipy_izvewenij> gettipy_izvewenijs(int start, int end) {
		return tipy_izvewenijPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of tipy_izvewenijs.
	 *
	 * @return the number of tipy_izvewenijs
	 */
	@Override
	public int gettipy_izvewenijsCount() {
		return tipy_izvewenijPersistence.countAll();
	}

	/**
	 * Updates the tipy_izvewenij in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param tipy_izvewenij the tipy_izvewenij
	 * @return the tipy_izvewenij that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public tipy_izvewenij updatetipy_izvewenij(tipy_izvewenij tipy_izvewenij) {
		return tipy_izvewenijPersistence.update(tipy_izvewenij);
	}

	/**
	 * Returns the tipy_izvewenij local service.
	 *
	 * @return the tipy_izvewenij local service
	 */
	public tipy_izvewenijLocalService gettipy_izvewenijLocalService() {
		return tipy_izvewenijLocalService;
	}

	/**
	 * Sets the tipy_izvewenij local service.
	 *
	 * @param tipy_izvewenijLocalService the tipy_izvewenij local service
	 */
	public void settipy_izvewenijLocalService(
		tipy_izvewenijLocalService tipy_izvewenijLocalService) {
		this.tipy_izvewenijLocalService = tipy_izvewenijLocalService;
	}

	/**
	 * Returns the tipy_izvewenij persistence.
	 *
	 * @return the tipy_izvewenij persistence
	 */
	public tipy_izvewenijPersistence gettipy_izvewenijPersistence() {
		return tipy_izvewenijPersistence;
	}

	/**
	 * Sets the tipy_izvewenij persistence.
	 *
	 * @param tipy_izvewenijPersistence the tipy_izvewenij persistence
	 */
	public void settipy_izvewenijPersistence(
		tipy_izvewenijPersistence tipy_izvewenijPersistence) {
		this.tipy_izvewenijPersistence = tipy_izvewenijPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("tj.tipy.izvewenij.model.tipy_izvewenij",
			tipy_izvewenijLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"tj.tipy.izvewenij.model.tipy_izvewenij");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return tipy_izvewenijLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return tipy_izvewenij.class;
	}

	protected String getModelClassName() {
		return tipy_izvewenij.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = tipy_izvewenijPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = tipy_izvewenijLocalService.class)
	protected tipy_izvewenijLocalService tipy_izvewenijLocalService;
	@BeanReference(type = tipy_izvewenijPersistence.class)
	protected tipy_izvewenijPersistence tipy_izvewenijPersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}