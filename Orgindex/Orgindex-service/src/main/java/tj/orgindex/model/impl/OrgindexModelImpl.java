/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package tj.orgindex.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import tj.orgindex.model.Orgindex;
import tj.orgindex.model.OrgindexModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Orgindex service. Represents a row in the &quot;sapp.orgindex&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link OrgindexModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link OrgindexImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see OrgindexImpl
 * @see Orgindex
 * @see OrgindexModel
 * @generated
 */
@ProviderType
public class OrgindexModelImpl extends BaseModelImpl<Orgindex>
	implements OrgindexModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a orgindex model instance should use the {@link Orgindex} interface instead.
	 */
	public static final String TABLE_NAME = "sapp.orgindex";
	public static final Object[][] TABLE_COLUMNS = {
			{ "orgindex_id", Types.BIGINT },
			{ "organization_id", Types.BIGINT },
			{ "subdivision_index", Types.INTEGER },
			{ "sozdal", Types.BIGINT },
			{ "izmenil", Types.BIGINT },
			{ "data_sozdanija", Types.TIMESTAMP },
			{ "data_izmenenija", Types.TIMESTAMP },
			{ "name", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("orgindex_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("organization_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("subdivision_index", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("sozdal", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("izmenil", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("data_sozdanija", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("data_izmenenija", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table sapp.orgindex (orgindex_id LONG not null primary key,organization_id LONG,subdivision_index INTEGER,sozdal LONG,izmenil LONG,data_sozdanija DATE null,data_izmenenija DATE null,name VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table sapp.orgindex";
	public static final String ORDER_BY_JPQL = " ORDER BY orgindex.orgindex_id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY sapp.orgindex.orgindex_id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(tj.orgindex.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.tj.orgindex.model.Orgindex"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(tj.orgindex.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.tj.orgindex.model.Orgindex"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(tj.orgindex.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.tj.orgindex.model.Orgindex"),
			true);
	public static final long ORGANIZATION_ID_COLUMN_BITMASK = 1L;
	public static final long ORGINDEX_ID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(tj.orgindex.service.util.ServiceProps.get(
				"lock.expiration.time.tj.orgindex.model.Orgindex"));

	public OrgindexModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _orgindex_id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setOrgindex_id(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _orgindex_id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Orgindex.class;
	}

	@Override
	public String getModelClassName() {
		return Orgindex.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("orgindex_id", getOrgindex_id());
		attributes.put("organization_id", getOrganization_id());
		attributes.put("subdivision_index", getSubdivision_index());
		attributes.put("sozdal", getSozdal());
		attributes.put("izmenil", getIzmenil());
		attributes.put("data_sozdanija", getData_sozdanija());
		attributes.put("data_izmenenija", getData_izmenenija());
		attributes.put("name", getName());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long orgindex_id = (Long)attributes.get("orgindex_id");

		if (orgindex_id != null) {
			setOrgindex_id(orgindex_id);
		}

		Long organization_id = (Long)attributes.get("organization_id");

		if (organization_id != null) {
			setOrganization_id(organization_id);
		}

		Integer subdivision_index = (Integer)attributes.get("subdivision_index");

		if (subdivision_index != null) {
			setSubdivision_index(subdivision_index);
		}

		Long sozdal = (Long)attributes.get("sozdal");

		if (sozdal != null) {
			setSozdal(sozdal);
		}

		Long izmenil = (Long)attributes.get("izmenil");

		if (izmenil != null) {
			setIzmenil(izmenil);
		}

		Date data_sozdanija = (Date)attributes.get("data_sozdanija");

		if (data_sozdanija != null) {
			setData_sozdanija(data_sozdanija);
		}

		Date data_izmenenija = (Date)attributes.get("data_izmenenija");

		if (data_izmenenija != null) {
			setData_izmenenija(data_izmenenija);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}
	}

	@Override
	public long getOrgindex_id() {
		return _orgindex_id;
	}

	@Override
	public void setOrgindex_id(long orgindex_id) {
		_orgindex_id = orgindex_id;
	}

	@Override
	public long getOrganization_id() {
		return _organization_id;
	}

	@Override
	public void setOrganization_id(long organization_id) {
		_columnBitmask |= ORGANIZATION_ID_COLUMN_BITMASK;

		if (!_setOriginalOrganization_id) {
			_setOriginalOrganization_id = true;

			_originalOrganization_id = _organization_id;
		}

		_organization_id = organization_id;
	}

	public long getOriginalOrganization_id() {
		return _originalOrganization_id;
	}

	@Override
	public int getSubdivision_index() {
		return _subdivision_index;
	}

	@Override
	public void setSubdivision_index(int subdivision_index) {
		_subdivision_index = subdivision_index;
	}

	@Override
	public long getSozdal() {
		return _sozdal;
	}

	@Override
	public void setSozdal(long sozdal) {
		_sozdal = sozdal;
	}

	@Override
	public long getIzmenil() {
		return _izmenil;
	}

	@Override
	public void setIzmenil(long izmenil) {
		_izmenil = izmenil;
	}

	@Override
	public Date getData_sozdanija() {
		return _data_sozdanija;
	}

	@Override
	public void setData_sozdanija(Date data_sozdanija) {
		_data_sozdanija = data_sozdanija;
	}

	@Override
	public Date getData_izmenenija() {
		return _data_izmenenija;
	}

	@Override
	public void setData_izmenenija(Date data_izmenenija) {
		_data_izmenenija = data_izmenenija;
	}

	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Orgindex.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Orgindex toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Orgindex)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		OrgindexImpl orgindexImpl = new OrgindexImpl();

		orgindexImpl.setOrgindex_id(getOrgindex_id());
		orgindexImpl.setOrganization_id(getOrganization_id());
		orgindexImpl.setSubdivision_index(getSubdivision_index());
		orgindexImpl.setSozdal(getSozdal());
		orgindexImpl.setIzmenil(getIzmenil());
		orgindexImpl.setData_sozdanija(getData_sozdanija());
		orgindexImpl.setData_izmenenija(getData_izmenenija());
		orgindexImpl.setName(getName());

		orgindexImpl.resetOriginalValues();

		return orgindexImpl;
	}

	@Override
	public int compareTo(Orgindex orgindex) {
		long primaryKey = orgindex.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Orgindex)) {
			return false;
		}

		Orgindex orgindex = (Orgindex)obj;

		long primaryKey = orgindex.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		OrgindexModelImpl orgindexModelImpl = this;

		orgindexModelImpl._originalOrganization_id = orgindexModelImpl._organization_id;

		orgindexModelImpl._setOriginalOrganization_id = false;

		orgindexModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Orgindex> toCacheModel() {
		OrgindexCacheModel orgindexCacheModel = new OrgindexCacheModel();

		orgindexCacheModel.orgindex_id = getOrgindex_id();

		orgindexCacheModel.organization_id = getOrganization_id();

		orgindexCacheModel.subdivision_index = getSubdivision_index();

		orgindexCacheModel.sozdal = getSozdal();

		orgindexCacheModel.izmenil = getIzmenil();

		Date data_sozdanija = getData_sozdanija();

		if (data_sozdanija != null) {
			orgindexCacheModel.data_sozdanija = data_sozdanija.getTime();
		}
		else {
			orgindexCacheModel.data_sozdanija = Long.MIN_VALUE;
		}

		Date data_izmenenija = getData_izmenenija();

		if (data_izmenenija != null) {
			orgindexCacheModel.data_izmenenija = data_izmenenija.getTime();
		}
		else {
			orgindexCacheModel.data_izmenenija = Long.MIN_VALUE;
		}

		orgindexCacheModel.name = getName();

		String name = orgindexCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			orgindexCacheModel.name = null;
		}

		return orgindexCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{orgindex_id=");
		sb.append(getOrgindex_id());
		sb.append(", organization_id=");
		sb.append(getOrganization_id());
		sb.append(", subdivision_index=");
		sb.append(getSubdivision_index());
		sb.append(", sozdal=");
		sb.append(getSozdal());
		sb.append(", izmenil=");
		sb.append(getIzmenil());
		sb.append(", data_sozdanija=");
		sb.append(getData_sozdanija());
		sb.append(", data_izmenenija=");
		sb.append(getData_izmenenija());
		sb.append(", name=");
		sb.append(getName());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("tj.orgindex.model.Orgindex");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>orgindex_id</column-name><column-value><![CDATA[");
		sb.append(getOrgindex_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>organization_id</column-name><column-value><![CDATA[");
		sb.append(getOrganization_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subdivision_index</column-name><column-value><![CDATA[");
		sb.append(getSubdivision_index());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sozdal</column-name><column-value><![CDATA[");
		sb.append(getSozdal());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>izmenil</column-name><column-value><![CDATA[");
		sb.append(getIzmenil());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>data_sozdanija</column-name><column-value><![CDATA[");
		sb.append(getData_sozdanija());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>data_izmenenija</column-name><column-value><![CDATA[");
		sb.append(getData_izmenenija());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Orgindex.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Orgindex.class
		};
	private long _orgindex_id;
	private long _organization_id;
	private long _originalOrganization_id;
	private boolean _setOriginalOrganization_id;
	private int _subdivision_index;
	private long _sozdal;
	private long _izmenil;
	private Date _data_sozdanija;
	private Date _data_izmenenija;
	private String _name;
	private long _columnBitmask;
	private Orgindex _escapedModel;
}