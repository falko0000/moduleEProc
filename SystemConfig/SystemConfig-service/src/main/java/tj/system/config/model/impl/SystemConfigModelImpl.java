/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package tj.system.config.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import tj.system.config.model.SystemConfig;
import tj.system.config.model.SystemConfigModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the SystemConfig service. Represents a row in the &quot;sapp.system_config&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link SystemConfigModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SystemConfigImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see SystemConfigImpl
 * @see SystemConfig
 * @see SystemConfigModel
 * @generated
 */
@ProviderType
public class SystemConfigModelImpl extends BaseModelImpl<SystemConfig>
	implements SystemConfigModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a system config model instance should use the {@link SystemConfig} interface instead.
	 */
	public static final String TABLE_NAME = "sapp.system_config";
	public static final Object[][] TABLE_COLUMNS = {
			{ "system_config_id_", Types.BIGINT },
			{ "key_", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "value", Types.VARCHAR },
			{ "type_", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("system_config_id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("key_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("value", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("type_", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table sapp.system_config (system_config_id_ LONG not null primary key,key_ VARCHAR(75) null,description VARCHAR(75) null,value VARCHAR(75) null,type_ VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table sapp.system_config";
	public static final String ORDER_BY_JPQL = " ORDER BY systemConfig.system_config_id_ ASC";
	public static final String ORDER_BY_SQL = " ORDER BY sapp.system_config.system_config_id_ ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(tj.system.config.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.tj.system.config.model.SystemConfig"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(tj.system.config.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.tj.system.config.model.SystemConfig"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(tj.system.config.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.tj.system.config.model.SystemConfig"),
			true);
	public static final long KEY_COLUMN_BITMASK = 1L;
	public static final long SYSTEM_CONFIG_ID__COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(tj.system.config.service.util.ServiceProps.get(
				"lock.expiration.time.tj.system.config.model.SystemConfig"));

	public SystemConfigModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _system_config_id_;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSystem_config_id_(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _system_config_id_;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SystemConfig.class;
	}

	@Override
	public String getModelClassName() {
		return SystemConfig.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("system_config_id_", getSystem_config_id_());
		attributes.put("key", getKey());
		attributes.put("description", getDescription());
		attributes.put("value", getValue());
		attributes.put("type", getType());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long system_config_id_ = (Long)attributes.get("system_config_id_");

		if (system_config_id_ != null) {
			setSystem_config_id_(system_config_id_);
		}

		String key = (String)attributes.get("key");

		if (key != null) {
			setKey(key);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		String value = (String)attributes.get("value");

		if (value != null) {
			setValue(value);
		}

		String type = (String)attributes.get("type");

		if (type != null) {
			setType(type);
		}
	}

	@Override
	public long getSystem_config_id_() {
		return _system_config_id_;
	}

	@Override
	public void setSystem_config_id_(long system_config_id_) {
		_system_config_id_ = system_config_id_;
	}

	@Override
	public String getKey() {
		if (_key == null) {
			return StringPool.BLANK;
		}
		else {
			return _key;
		}
	}

	@Override
	public void setKey(String key) {
		_columnBitmask |= KEY_COLUMN_BITMASK;

		if (_originalKey == null) {
			_originalKey = _key;
		}

		_key = key;
	}

	public String getOriginalKey() {
		return GetterUtil.getString(_originalKey);
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public String getValue() {
		if (_value == null) {
			return StringPool.BLANK;
		}
		else {
			return _value;
		}
	}

	@Override
	public void setValue(String value) {
		_value = value;
	}

	@Override
	public String getType() {
		if (_type == null) {
			return StringPool.BLANK;
		}
		else {
			return _type;
		}
	}

	@Override
	public void setType(String type) {
		_type = type;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			SystemConfig.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SystemConfig toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (SystemConfig)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SystemConfigImpl systemConfigImpl = new SystemConfigImpl();

		systemConfigImpl.setSystem_config_id_(getSystem_config_id_());
		systemConfigImpl.setKey(getKey());
		systemConfigImpl.setDescription(getDescription());
		systemConfigImpl.setValue(getValue());
		systemConfigImpl.setType(getType());

		systemConfigImpl.resetOriginalValues();

		return systemConfigImpl;
	}

	@Override
	public int compareTo(SystemConfig systemConfig) {
		long primaryKey = systemConfig.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SystemConfig)) {
			return false;
		}

		SystemConfig systemConfig = (SystemConfig)obj;

		long primaryKey = systemConfig.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		SystemConfigModelImpl systemConfigModelImpl = this;

		systemConfigModelImpl._originalKey = systemConfigModelImpl._key;

		systemConfigModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<SystemConfig> toCacheModel() {
		SystemConfigCacheModel systemConfigCacheModel = new SystemConfigCacheModel();

		systemConfigCacheModel.system_config_id_ = getSystem_config_id_();

		systemConfigCacheModel.key = getKey();

		String key = systemConfigCacheModel.key;

		if ((key != null) && (key.length() == 0)) {
			systemConfigCacheModel.key = null;
		}

		systemConfigCacheModel.description = getDescription();

		String description = systemConfigCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			systemConfigCacheModel.description = null;
		}

		systemConfigCacheModel.value = getValue();

		String value = systemConfigCacheModel.value;

		if ((value != null) && (value.length() == 0)) {
			systemConfigCacheModel.value = null;
		}

		systemConfigCacheModel.type = getType();

		String type = systemConfigCacheModel.type;

		if ((type != null) && (type.length() == 0)) {
			systemConfigCacheModel.type = null;
		}

		return systemConfigCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{system_config_id_=");
		sb.append(getSystem_config_id_());
		sb.append(", key=");
		sb.append(getKey());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", value=");
		sb.append(getValue());
		sb.append(", type=");
		sb.append(getType());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("tj.system.config.model.SystemConfig");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>system_config_id_</column-name><column-value><![CDATA[");
		sb.append(getSystem_config_id_());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>key</column-name><column-value><![CDATA[");
		sb.append(getKey());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>value</column-name><column-value><![CDATA[");
		sb.append(getValue());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>type</column-name><column-value><![CDATA[");
		sb.append(getType());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = SystemConfig.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			SystemConfig.class
		};
	private long _system_config_id_;
	private String _key;
	private String _originalKey;
	private String _description;
	private String _value;
	private String _type;
	private long _columnBitmask;
	private SystemConfig _escapedModel;
}